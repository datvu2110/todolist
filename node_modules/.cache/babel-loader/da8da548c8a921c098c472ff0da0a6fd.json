{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\n(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define([\"require\", \"exports\", \"./Enums\", \"../../Utils\", \"./Options/Classes/PolygonMask\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.PolygonMaskInstance = void 0;\n\n  const Enums_1 = require(\"./Enums\");\n\n  const Utils_1 = require(\"../../Utils\");\n\n  const PolygonMask_1 = require(\"./Options/Classes/PolygonMask\");\n\n  function polygonBounce(particle) {\n    particle.velocity.horizontal = particle.velocity.vertical / 2 - particle.velocity.horizontal;\n    particle.velocity.vertical = particle.velocity.horizontal / 2 - particle.velocity.vertical;\n  }\n\n  function drawPolygonMask(context, rawData, stroke) {\n    const color = Utils_1.ColorUtils.colorToRgb(stroke.color);\n\n    if (!color) {\n      return;\n    }\n\n    context.beginPath();\n    context.moveTo(rawData[0].x, rawData[0].y);\n\n    for (const item of rawData) {\n      context.lineTo(item.x, item.y);\n    }\n\n    context.closePath();\n    context.strokeStyle = Utils_1.ColorUtils.getStyleFromRgb(color);\n    context.lineWidth = stroke.width;\n    context.stroke();\n  }\n\n  function drawPolygonMaskPath(context, path, stroke, position) {\n    context.translate(position.x, position.y);\n    const color = Utils_1.ColorUtils.colorToRgb(stroke.color);\n\n    if (!color) {\n      return;\n    }\n\n    context.strokeStyle = Utils_1.ColorUtils.getStyleFromRgb(color, stroke.opacity);\n    context.lineWidth = stroke.width;\n    context.stroke(path);\n  }\n\n  function parsePaths(paths, scale, offset) {\n    const res = [];\n\n    for (const path of paths) {\n      const segments = path.element.pathSegList;\n      const len = segments.numberOfItems;\n      const p = {\n        x: 0,\n        y: 0\n      };\n\n      for (let i = 0; i < len; i++) {\n        const segment = segments.getItem(i);\n        const svgPathSeg = window.SVGPathSeg;\n\n        switch (segment.pathSegType) {\n          case svgPathSeg.PATHSEG_MOVETO_ABS:\n          case svgPathSeg.PATHSEG_LINETO_ABS:\n          case svgPathSeg.PATHSEG_CURVETO_CUBIC_ABS:\n          case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS:\n          case svgPathSeg.PATHSEG_ARC_ABS:\n          case svgPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS:\n          case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS:\n            {\n              const absSeg = segment;\n              p.x = absSeg.x;\n              p.y = absSeg.y;\n              break;\n            }\n\n          case svgPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS:\n            p.x = segment.x;\n            break;\n\n          case svgPathSeg.PATHSEG_LINETO_VERTICAL_ABS:\n            p.y = segment.y;\n            break;\n\n          case svgPathSeg.PATHSEG_LINETO_REL:\n          case svgPathSeg.PATHSEG_MOVETO_REL:\n          case svgPathSeg.PATHSEG_CURVETO_CUBIC_REL:\n          case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_REL:\n          case svgPathSeg.PATHSEG_ARC_REL:\n          case svgPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL:\n          case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL:\n            {\n              const relSeg = segment;\n              p.x += relSeg.x;\n              p.y += relSeg.y;\n              break;\n            }\n\n          case svgPathSeg.PATHSEG_LINETO_HORIZONTAL_REL:\n            p.x += segment.x;\n            break;\n\n          case svgPathSeg.PATHSEG_LINETO_VERTICAL_REL:\n            p.y += segment.y;\n            break;\n\n          case svgPathSeg.PATHSEG_UNKNOWN:\n          case svgPathSeg.PATHSEG_CLOSEPATH:\n            continue;\n        }\n\n        res.push({\n          x: p.x * scale + offset.x,\n          y: p.y * scale + offset.y\n        });\n      }\n    }\n\n    return res;\n  }\n\n  class PolygonMaskInstance {\n    constructor(container) {\n      this.container = container;\n      this.dimension = {\n        height: 0,\n        width: 0\n      };\n      this.path2DSupported = !!window.Path2D;\n      this.options = new PolygonMask_1.PolygonMask();\n      this.polygonMaskMoveRadius = this.options.move.radius * container.retina.pixelRatio;\n    }\n\n    initAsync(options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.options.load(options === null || options === void 0 ? void 0 : options.polygon);\n        const polygonMaskOptions = this.options;\n        this.polygonMaskMoveRadius = polygonMaskOptions.move.radius * this.container.retina.pixelRatio;\n\n        if (polygonMaskOptions.enable) {\n          yield this.initRawData();\n        }\n      });\n    }\n\n    resize() {\n      const container = this.container;\n      const options = this.options;\n\n      if (!(options.enable && options.type !== Enums_1.Type.none)) {\n        return;\n      }\n\n      if (this.redrawTimeout) {\n        clearTimeout(this.redrawTimeout);\n      }\n\n      this.redrawTimeout = window.setTimeout(() => __awaiter(this, void 0, void 0, function* () {\n        yield this.initRawData(true);\n        container.particles.redraw();\n      }), 250);\n    }\n\n    stop() {\n      delete this.raw;\n      delete this.paths;\n    }\n\n    particlesInitialization() {\n      const options = this.options;\n\n      if (options.enable && options.type === Enums_1.Type.inline && (options.inline.arrangement === Enums_1.InlineArrangement.onePerPoint || options.inline.arrangement === Enums_1.InlineArrangement.perPoint)) {\n        this.drawPoints();\n        return true;\n      }\n\n      return false;\n    }\n\n    particlePosition(position) {\n      var _a, _b;\n\n      const options = this.options;\n\n      if (!(options.enable && ((_b = (_a = this.raw) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 0)) {\n        return;\n      }\n\n      return Utils_1.Utils.deepExtend({}, position ? position : this.randomPoint());\n    }\n\n    particleBounce(particle) {\n      const options = this.options;\n\n      if (options.enable && options.type !== Enums_1.Type.none && options.type !== Enums_1.Type.inline) {\n        if (!this.checkInsidePolygon(particle.getPosition())) {\n          polygonBounce(particle);\n          return true;\n        }\n      } else if (options.enable && options.type === Enums_1.Type.inline && particle.initialPosition) {\n        const dist = Utils_1.NumberUtils.getDistance(particle.initialPosition, particle.getPosition());\n\n        if (dist > this.polygonMaskMoveRadius) {\n          polygonBounce(particle);\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    clickPositionValid(position) {\n      const options = this.options;\n      return options.enable && options.type !== Enums_1.Type.none && options.type !== Enums_1.Type.inline && this.checkInsidePolygon(position);\n    }\n\n    draw(context) {\n      var _a;\n\n      if (!((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n        return;\n      }\n\n      const options = this.options;\n      const polygonDraw = options.draw;\n\n      if (!(options.enable && polygonDraw.enable)) {\n        return;\n      }\n\n      const rawData = this.raw;\n\n      for (const path of this.paths) {\n        const path2d = path.path2d;\n        const path2dSupported = this.path2DSupported;\n\n        if (!context) {\n          continue;\n        }\n\n        if (path2dSupported && path2d && this.offset) {\n          drawPolygonMaskPath(context, path2d, polygonDraw.stroke, this.offset);\n        } else if (rawData) {\n          drawPolygonMask(context, rawData, polygonDraw.stroke);\n        }\n      }\n    }\n\n    checkInsidePolygon(position) {\n      var _a, _b;\n\n      const container = this.container;\n      const options = this.options;\n\n      if (!options.enable || options.type === Enums_1.Type.none || options.type === Enums_1.Type.inline) {\n        return true;\n      }\n\n      if (!this.raw) {\n        throw new Error(Utils_1.Constants.noPolygonFound);\n      }\n\n      const canvasSize = container.canvas.size;\n      const x = (_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width;\n      const y = (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height;\n      let inside = false;\n\n      for (let i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n        const pi = this.raw[i];\n        const pj = this.raw[j];\n        const intersect = pi.y > y !== pj.y > y && x < (pj.x - pi.x) * (y - pi.y) / (pj.y - pi.y) + pi.x;\n\n        if (intersect) {\n          inside = !inside;\n        }\n      }\n\n      return options.type === Enums_1.Type.inside ? inside : options.type === Enums_1.Type.outside ? !inside : false;\n    }\n\n    parseSvgPath(xml, force) {\n      var _a, _b, _c;\n\n      const forceDownload = force !== null && force !== void 0 ? force : false;\n\n      if (this.paths !== undefined && !forceDownload) {\n        return this.raw;\n      }\n\n      const container = this.container;\n      const options = this.options;\n      const parser = new DOMParser();\n      const doc = parser.parseFromString(xml, \"image/svg+xml\");\n      const svg = doc.getElementsByTagName(\"svg\")[0];\n      let svgPaths = svg.getElementsByTagName(\"path\");\n\n      if (!svgPaths.length) {\n        svgPaths = doc.getElementsByTagName(\"path\");\n      }\n\n      this.paths = [];\n\n      for (let i = 0; i < svgPaths.length; i++) {\n        const path = svgPaths.item(i);\n\n        if (path) {\n          this.paths.push({\n            element: path,\n            length: path.getTotalLength()\n          });\n        }\n      }\n\n      const pxRatio = container.retina.pixelRatio;\n      const scale = options.scale / pxRatio;\n      this.dimension.width = parseFloat((_a = svg.getAttribute(\"width\")) !== null && _a !== void 0 ? _a : \"0\") * scale;\n      this.dimension.height = parseFloat((_b = svg.getAttribute(\"height\")) !== null && _b !== void 0 ? _b : \"0\") * scale;\n      const position = (_c = options.position) !== null && _c !== void 0 ? _c : {\n        x: 50,\n        y: 50\n      };\n      this.offset = {\n        x: container.canvas.size.width * position.x / (100 * pxRatio) - this.dimension.width / 2,\n        y: container.canvas.size.height * position.y / (100 * pxRatio) - this.dimension.height / 2\n      };\n      return parsePaths(this.paths, scale, this.offset);\n    }\n\n    downloadSvgPath(svgUrl, force) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const options = this.options;\n        const url = svgUrl || options.url;\n        const forceDownload = force !== null && force !== void 0 ? force : false;\n\n        if (!url || this.paths !== undefined && !forceDownload) {\n          return this.raw;\n        }\n\n        const req = yield fetch(url);\n\n        if (!req.ok) {\n          throw new Error(\"tsParticles Error - Error occurred during polygon mask download\");\n        }\n\n        return this.parseSvgPath(yield req.text(), force);\n      });\n    }\n\n    drawPoints() {\n      if (!this.raw) {\n        return;\n      }\n\n      for (const item of this.raw) {\n        this.container.particles.addParticle({\n          x: item.x,\n          y: item.y\n        });\n      }\n    }\n\n    randomPoint() {\n      const container = this.container;\n      const options = this.options;\n      let position;\n\n      if (options.type === Enums_1.Type.inline) {\n        switch (options.inline.arrangement) {\n          case Enums_1.InlineArrangement.randomPoint:\n            position = this.getRandomPoint();\n            break;\n\n          case Enums_1.InlineArrangement.randomLength:\n            position = this.getRandomPointByLength();\n            break;\n\n          case Enums_1.InlineArrangement.equidistant:\n            position = this.getEquidistantPointByIndex(container.particles.count);\n            break;\n\n          case Enums_1.InlineArrangement.onePerPoint:\n          case Enums_1.InlineArrangement.perPoint:\n          default:\n            position = this.getPointByIndex(container.particles.count);\n        }\n      } else {\n        position = {\n          x: Math.random() * container.canvas.size.width,\n          y: Math.random() * container.canvas.size.height\n        };\n      }\n\n      if (this.checkInsidePolygon(position)) {\n        return position;\n      } else {\n        return this.randomPoint();\n      }\n    }\n\n    getRandomPoint() {\n      if (!this.raw || !this.raw.length) {\n        throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n      }\n\n      const coords = Utils_1.Utils.itemFromArray(this.raw);\n      return {\n        x: coords.x,\n        y: coords.y\n      };\n    }\n\n    getRandomPointByLength() {\n      var _a, _b, _c;\n\n      const options = this.options;\n\n      if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n        throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n      }\n\n      const path = Utils_1.Utils.itemFromArray(this.paths);\n      const distance = Math.floor(Math.random() * path.length) + 1;\n      const point = path.element.getPointAtLength(distance);\n      return {\n        x: point.x * options.scale + (((_b = this.offset) === null || _b === void 0 ? void 0 : _b.x) || 0),\n        y: point.y * options.scale + (((_c = this.offset) === null || _c === void 0 ? void 0 : _c.y) || 0)\n      };\n    }\n\n    getEquidistantPointByIndex(index) {\n      var _a, _b, _c, _d, _e, _f, _g;\n\n      const options = this.container.options;\n      const polygonMaskOptions = this.options;\n      if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n      let offset = 0;\n      let point;\n      const totalLength = this.paths.reduce((tot, path) => tot + path.length, 0);\n      const distance = totalLength / options.particles.number.value;\n\n      for (const path of this.paths) {\n        const pathDistance = distance * index - offset;\n\n        if (pathDistance <= path.length) {\n          point = path.element.getPointAtLength(pathDistance);\n          break;\n        } else {\n          offset += path.length;\n        }\n      }\n\n      return {\n        x: ((_b = point === null || point === void 0 ? void 0 : point.x) !== null && _b !== void 0 ? _b : 0) * polygonMaskOptions.scale + ((_d = (_c = this.offset) === null || _c === void 0 ? void 0 : _c.x) !== null && _d !== void 0 ? _d : 0),\n        y: ((_e = point === null || point === void 0 ? void 0 : point.y) !== null && _e !== void 0 ? _e : 0) * polygonMaskOptions.scale + ((_g = (_f = this.offset) === null || _f === void 0 ? void 0 : _f.y) !== null && _g !== void 0 ? _g : 0)\n      };\n    }\n\n    getPointByIndex(index) {\n      if (!this.raw || !this.raw.length) {\n        throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n      }\n\n      const coords = this.raw[index % this.raw.length];\n      return {\n        x: coords.x,\n        y: coords.y\n      };\n    }\n\n    createPath2D() {\n      var _a, _b;\n\n      const options = this.options;\n\n      if (!this.path2DSupported || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n        return;\n      }\n\n      for (const path of this.paths) {\n        const pathData = (_b = path.element) === null || _b === void 0 ? void 0 : _b.getAttribute(\"d\");\n\n        if (pathData) {\n          const path2d = new Path2D(pathData);\n          const matrix = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\").createSVGMatrix();\n          const finalPath = new Path2D();\n          const transform = matrix.scale(options.scale);\n\n          if (finalPath.addPath) {\n            finalPath.addPath(path2d, transform);\n            path.path2d = finalPath;\n          } else {\n            delete path.path2d;\n          }\n        } else {\n          delete path.path2d;\n        }\n\n        if (path.path2d || !this.raw) {\n          continue;\n        }\n\n        path.path2d = new Path2D();\n        path.path2d.moveTo(this.raw[0].x, this.raw[0].y);\n        this.raw.forEach((pos, i) => {\n          var _a;\n\n          if (i > 0) {\n            (_a = path.path2d) === null || _a === void 0 ? void 0 : _a.lineTo(pos.x, pos.y);\n          }\n        });\n        path.path2d.closePath();\n      }\n    }\n\n    initRawData(force) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const options = this.options;\n\n        if (options.url) {\n          this.raw = yield this.downloadSvgPath(options.url, force);\n        } else if (options.data) {\n          const data = options.data;\n          let svg;\n\n          if (typeof data !== \"string\") {\n            const path = data.path instanceof Array ? data.path.map(t => `<path d=\"${t}\" />`).join(\"\") : `<path d=\"${data.path}\" />`;\n            const namespaces = 'xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"';\n            svg = `<svg ${namespaces} width=\"${data.size.width}\" height=\"${data.size.height}\">${path}</svg>`;\n          } else {\n            svg = data;\n          }\n\n          this.raw = this.parseSvgPath(svg, force);\n        }\n\n        this.createPath2D();\n      });\n    }\n\n  }\n\n  exports.PolygonMaskInstance = PolygonMaskInstance;\n});","map":{"version":3,"sources":["/Users/beetee/Downloads/Bloc/todolist/node_modules/tsparticles/dist/Plugins/PolygonMask/PolygonMaskInstance.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","factory","module","exports","v","require","undefined","define","amd","Object","defineProperty","PolygonMaskInstance","Enums_1","Utils_1","PolygonMask_1","polygonBounce","particle","velocity","horizontal","vertical","drawPolygonMask","context","rawData","stroke","color","ColorUtils","colorToRgb","beginPath","moveTo","x","y","item","lineTo","closePath","strokeStyle","getStyleFromRgb","lineWidth","width","drawPolygonMaskPath","path","position","translate","opacity","parsePaths","paths","scale","offset","res","segments","element","pathSegList","len","numberOfItems","p","i","segment","getItem","svgPathSeg","window","SVGPathSeg","pathSegType","PATHSEG_MOVETO_ABS","PATHSEG_LINETO_ABS","PATHSEG_CURVETO_CUBIC_ABS","PATHSEG_CURVETO_QUADRATIC_ABS","PATHSEG_ARC_ABS","PATHSEG_CURVETO_CUBIC_SMOOTH_ABS","PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS","absSeg","PATHSEG_LINETO_HORIZONTAL_ABS","PATHSEG_LINETO_VERTICAL_ABS","PATHSEG_LINETO_REL","PATHSEG_MOVETO_REL","PATHSEG_CURVETO_CUBIC_REL","PATHSEG_CURVETO_QUADRATIC_REL","PATHSEG_ARC_REL","PATHSEG_CURVETO_CUBIC_SMOOTH_REL","PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL","relSeg","PATHSEG_LINETO_HORIZONTAL_REL","PATHSEG_LINETO_VERTICAL_REL","PATHSEG_UNKNOWN","PATHSEG_CLOSEPATH","push","constructor","container","dimension","height","path2DSupported","Path2D","options","PolygonMask","polygonMaskMoveRadius","move","radius","retina","pixelRatio","initAsync","load","polygon","polygonMaskOptions","enable","initRawData","resize","type","Type","none","redrawTimeout","clearTimeout","setTimeout","particles","redraw","stop","raw","particlesInitialization","inline","arrangement","InlineArrangement","onePerPoint","perPoint","drawPoints","particlePosition","_a","_b","length","Utils","deepExtend","randomPoint","particleBounce","checkInsidePolygon","getPosition","initialPosition","dist","NumberUtils","getDistance","clickPositionValid","draw","polygonDraw","path2d","path2dSupported","Error","Constants","noPolygonFound","canvasSize","canvas","size","Math","random","inside","j","pi","pj","intersect","outside","parseSvgPath","xml","force","_c","forceDownload","parser","DOMParser","doc","parseFromString","svg","getElementsByTagName","svgPaths","getTotalLength","pxRatio","parseFloat","getAttribute","downloadSvgPath","svgUrl","url","req","fetch","ok","text","addParticle","getRandomPoint","randomLength","getRandomPointByLength","equidistant","getEquidistantPointByIndex","count","getPointByIndex","noPolygonDataLoaded","coords","itemFromArray","distance","floor","point","getPointAtLength","index","_d","_e","_f","_g","totalLength","reduce","tot","number","pathDistance","createPath2D","pathData","matrix","document","createElementNS","createSVGMatrix","finalPath","transform","addPath","forEach","pos","data","Array","map","t","join","namespaces"],"mappings":"AAAA,IAAIA,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA4B,UAAUC,OAAV,EAAmBC,UAAnB,EAA+BC,CAA/B,EAAkCC,SAAlC,EAA6C;AACrF,WAASC,KAAT,CAAeC,KAAf,EAAsB;AAAE,WAAOA,KAAK,YAAYH,CAAjB,GAAqBG,KAArB,GAA6B,IAAIH,CAAJ,CAAM,UAAUI,OAAV,EAAmB;AAAEA,MAAAA,OAAO,CAACD,KAAD,CAAP;AAAiB,KAA5C,CAApC;AAAoF;;AAC5G,SAAO,KAAKH,CAAC,KAAKA,CAAC,GAAGK,OAAT,CAAN,EAAyB,UAAUD,OAAV,EAAmBE,MAAnB,EAA2B;AACvD,aAASC,SAAT,CAAmBJ,KAAnB,EAA0B;AAAE,UAAI;AAAEK,QAAAA,IAAI,CAACP,SAAS,CAACQ,IAAV,CAAeN,KAAf,CAAD,CAAJ;AAA8B,OAApC,CAAqC,OAAOO,CAAP,EAAU;AAAEJ,QAAAA,MAAM,CAACI,CAAD,CAAN;AAAY;AAAE;;AAC3F,aAASC,QAAT,CAAkBR,KAAlB,EAAyB;AAAE,UAAI;AAAEK,QAAAA,IAAI,CAACP,SAAS,CAAC,OAAD,CAAT,CAAmBE,KAAnB,CAAD,CAAJ;AAAkC,OAAxC,CAAyC,OAAOO,CAAP,EAAU;AAAEJ,QAAAA,MAAM,CAACI,CAAD,CAAN;AAAY;AAAE;;AAC9F,aAASF,IAAT,CAAcI,MAAd,EAAsB;AAAEA,MAAAA,MAAM,CAACC,IAAP,GAAcT,OAAO,CAACQ,MAAM,CAACT,KAAR,CAArB,GAAsCD,KAAK,CAACU,MAAM,CAACT,KAAR,CAAL,CAAoBW,IAApB,CAAyBP,SAAzB,EAAoCI,QAApC,CAAtC;AAAsF;;AAC9GH,IAAAA,IAAI,CAAC,CAACP,SAAS,GAAGA,SAAS,CAACc,KAAV,CAAgBjB,OAAhB,EAAyBC,UAAU,IAAI,EAAvC,CAAb,EAAyDU,IAAzD,EAAD,CAAJ;AACH,GALM,CAAP;AAMH,CARD;;AASA,CAAC,UAAUO,OAAV,EAAmB;AAChB,MAAI,OAAOC,MAAP,KAAkB,QAAlB,IAA8B,OAAOA,MAAM,CAACC,OAAd,KAA0B,QAA5D,EAAsE;AAClE,QAAIC,CAAC,GAAGH,OAAO,CAACI,OAAD,EAAUF,OAAV,CAAf;AACA,QAAIC,CAAC,KAAKE,SAAV,EAAqBJ,MAAM,CAACC,OAAP,GAAiBC,CAAjB;AACxB,GAHD,MAIK,IAAI,OAAOG,MAAP,KAAkB,UAAlB,IAAgCA,MAAM,CAACC,GAA3C,EAAgD;AACjDD,IAAAA,MAAM,CAAC,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,aAAlC,EAAiD,+BAAjD,CAAD,EAAoFN,OAApF,CAAN;AACH;AACJ,CARD,EAQG,UAAUI,OAAV,EAAmBF,OAAnB,EAA4B;AAC3B;;AACAM,EAAAA,MAAM,CAACC,cAAP,CAAsBP,OAAtB,EAA+B,YAA/B,EAA6C;AAAEf,IAAAA,KAAK,EAAE;AAAT,GAA7C;AACAe,EAAAA,OAAO,CAACQ,mBAAR,GAA8B,KAAK,CAAnC;;AACA,QAAMC,OAAO,GAAGP,OAAO,CAAC,SAAD,CAAvB;;AACA,QAAMQ,OAAO,GAAGR,OAAO,CAAC,aAAD,CAAvB;;AACA,QAAMS,aAAa,GAAGT,OAAO,CAAC,+BAAD,CAA7B;;AACA,WAASU,aAAT,CAAuBC,QAAvB,EAAiC;AAC7BA,IAAAA,QAAQ,CAACC,QAAT,CAAkBC,UAAlB,GAA+BF,QAAQ,CAACC,QAAT,CAAkBE,QAAlB,GAA6B,CAA7B,GAAiCH,QAAQ,CAACC,QAAT,CAAkBC,UAAlF;AACAF,IAAAA,QAAQ,CAACC,QAAT,CAAkBE,QAAlB,GAA6BH,QAAQ,CAACC,QAAT,CAAkBC,UAAlB,GAA+B,CAA/B,GAAmCF,QAAQ,CAACC,QAAT,CAAkBE,QAAlF;AACH;;AACD,WAASC,eAAT,CAAyBC,OAAzB,EAAkCC,OAAlC,EAA2CC,MAA3C,EAAmD;AAC/C,UAAMC,KAAK,GAAGX,OAAO,CAACY,UAAR,CAAmBC,UAAnB,CAA8BH,MAAM,CAACC,KAArC,CAAd;;AACA,QAAI,CAACA,KAAL,EAAY;AACR;AACH;;AACDH,IAAAA,OAAO,CAACM,SAAR;AACAN,IAAAA,OAAO,CAACO,MAAR,CAAeN,OAAO,CAAC,CAAD,CAAP,CAAWO,CAA1B,EAA6BP,OAAO,CAAC,CAAD,CAAP,CAAWQ,CAAxC;;AACA,SAAK,MAAMC,IAAX,IAAmBT,OAAnB,EAA4B;AACxBD,MAAAA,OAAO,CAACW,MAAR,CAAeD,IAAI,CAACF,CAApB,EAAuBE,IAAI,CAACD,CAA5B;AACH;;AACDT,IAAAA,OAAO,CAACY,SAAR;AACAZ,IAAAA,OAAO,CAACa,WAAR,GAAsBrB,OAAO,CAACY,UAAR,CAAmBU,eAAnB,CAAmCX,KAAnC,CAAtB;AACAH,IAAAA,OAAO,CAACe,SAAR,GAAoBb,MAAM,CAACc,KAA3B;AACAhB,IAAAA,OAAO,CAACE,MAAR;AACH;;AACD,WAASe,mBAAT,CAA6BjB,OAA7B,EAAsCkB,IAAtC,EAA4ChB,MAA5C,EAAoDiB,QAApD,EAA8D;AAC1DnB,IAAAA,OAAO,CAACoB,SAAR,CAAkBD,QAAQ,CAACX,CAA3B,EAA8BW,QAAQ,CAACV,CAAvC;AACA,UAAMN,KAAK,GAAGX,OAAO,CAACY,UAAR,CAAmBC,UAAnB,CAA8BH,MAAM,CAACC,KAArC,CAAd;;AACA,QAAI,CAACA,KAAL,EAAY;AACR;AACH;;AACDH,IAAAA,OAAO,CAACa,WAAR,GAAsBrB,OAAO,CAACY,UAAR,CAAmBU,eAAnB,CAAmCX,KAAnC,EAA0CD,MAAM,CAACmB,OAAjD,CAAtB;AACArB,IAAAA,OAAO,CAACe,SAAR,GAAoBb,MAAM,CAACc,KAA3B;AACAhB,IAAAA,OAAO,CAACE,MAAR,CAAegB,IAAf;AACH;;AACD,WAASI,UAAT,CAAoBC,KAApB,EAA2BC,KAA3B,EAAkCC,MAAlC,EAA0C;AACtC,UAAMC,GAAG,GAAG,EAAZ;;AACA,SAAK,MAAMR,IAAX,IAAmBK,KAAnB,EAA0B;AACtB,YAAMI,QAAQ,GAAGT,IAAI,CAACU,OAAL,CAAaC,WAA9B;AACA,YAAMC,GAAG,GAAGH,QAAQ,CAACI,aAArB;AACA,YAAMC,CAAC,GAAG;AACNxB,QAAAA,CAAC,EAAE,CADG;AAENC,QAAAA,CAAC,EAAE;AAFG,OAAV;;AAIA,WAAK,IAAIwB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,GAApB,EAAyBG,CAAC,EAA1B,EAA8B;AAC1B,cAAMC,OAAO,GAAGP,QAAQ,CAACQ,OAAT,CAAiBF,CAAjB,CAAhB;AACA,cAAMG,UAAU,GAAGC,MAAM,CAACC,UAA1B;;AACA,gBAAQJ,OAAO,CAACK,WAAhB;AACI,eAAKH,UAAU,CAACI,kBAAhB;AACA,eAAKJ,UAAU,CAACK,kBAAhB;AACA,eAAKL,UAAU,CAACM,yBAAhB;AACA,eAAKN,UAAU,CAACO,6BAAhB;AACA,eAAKP,UAAU,CAACQ,eAAhB;AACA,eAAKR,UAAU,CAACS,gCAAhB;AACA,eAAKT,UAAU,CAACU,oCAAhB;AAAsD;AAClD,oBAAMC,MAAM,GAAGb,OAAf;AACAF,cAAAA,CAAC,CAACxB,CAAF,GAAMuC,MAAM,CAACvC,CAAb;AACAwB,cAAAA,CAAC,CAACvB,CAAF,GAAMsC,MAAM,CAACtC,CAAb;AACA;AACH;;AACD,eAAK2B,UAAU,CAACY,6BAAhB;AACIhB,YAAAA,CAAC,CAACxB,CAAF,GAAM0B,OAAO,CAAC1B,CAAd;AACA;;AACJ,eAAK4B,UAAU,CAACa,2BAAhB;AACIjB,YAAAA,CAAC,CAACvB,CAAF,GAAMyB,OAAO,CAACzB,CAAd;AACA;;AACJ,eAAK2B,UAAU,CAACc,kBAAhB;AACA,eAAKd,UAAU,CAACe,kBAAhB;AACA,eAAKf,UAAU,CAACgB,yBAAhB;AACA,eAAKhB,UAAU,CAACiB,6BAAhB;AACA,eAAKjB,UAAU,CAACkB,eAAhB;AACA,eAAKlB,UAAU,CAACmB,gCAAhB;AACA,eAAKnB,UAAU,CAACoB,oCAAhB;AAAsD;AAClD,oBAAMC,MAAM,GAAGvB,OAAf;AACAF,cAAAA,CAAC,CAACxB,CAAF,IAAOiD,MAAM,CAACjD,CAAd;AACAwB,cAAAA,CAAC,CAACvB,CAAF,IAAOgD,MAAM,CAAChD,CAAd;AACA;AACH;;AACD,eAAK2B,UAAU,CAACsB,6BAAhB;AACI1B,YAAAA,CAAC,CAACxB,CAAF,IAAO0B,OAAO,CAAC1B,CAAf;AACA;;AACJ,eAAK4B,UAAU,CAACuB,2BAAhB;AACI3B,YAAAA,CAAC,CAACvB,CAAF,IAAOyB,OAAO,CAACzB,CAAf;AACA;;AACJ,eAAK2B,UAAU,CAACwB,eAAhB;AACA,eAAKxB,UAAU,CAACyB,iBAAhB;AACI;AAvCR;;AAyCAnC,QAAAA,GAAG,CAACoC,IAAJ,CAAS;AACLtD,UAAAA,CAAC,EAAEwB,CAAC,CAACxB,CAAF,GAAMgB,KAAN,GAAcC,MAAM,CAACjB,CADnB;AAELC,UAAAA,CAAC,EAAEuB,CAAC,CAACvB,CAAF,GAAMe,KAAN,GAAcC,MAAM,CAAChB;AAFnB,SAAT;AAIH;AACJ;;AACD,WAAOiB,GAAP;AACH;;AACD,QAAMpC,mBAAN,CAA0B;AACtByE,IAAAA,WAAW,CAACC,SAAD,EAAY;AACnB,WAAKA,SAAL,GAAiBA,SAAjB;AACA,WAAKC,SAAL,GAAiB;AACbC,QAAAA,MAAM,EAAE,CADK;AAEblD,QAAAA,KAAK,EAAE;AAFM,OAAjB;AAIA,WAAKmD,eAAL,GAAuB,CAAC,CAAC9B,MAAM,CAAC+B,MAAhC;AACA,WAAKC,OAAL,GAAe,IAAI5E,aAAa,CAAC6E,WAAlB,EAAf;AACA,WAAKC,qBAAL,GAA6B,KAAKF,OAAL,CAAaG,IAAb,CAAkBC,MAAlB,GAA2BT,SAAS,CAACU,MAAV,CAAiBC,UAAzE;AACH;;AACDC,IAAAA,SAAS,CAACP,OAAD,EAAU;AACf,aAAO5G,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,aAAa;AAChD,aAAK4G,OAAL,CAAaQ,IAAb,CAAkBR,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACS,OAA5E;AACA,cAAMC,kBAAkB,GAAG,KAAKV,OAAhC;AACA,aAAKE,qBAAL,GAA6BQ,kBAAkB,CAACP,IAAnB,CAAwBC,MAAxB,GAAiC,KAAKT,SAAL,CAAeU,MAAf,CAAsBC,UAApF;;AACA,YAAII,kBAAkB,CAACC,MAAvB,EAA+B;AAC3B,gBAAM,KAAKC,WAAL,EAAN;AACH;AACJ,OAPe,CAAhB;AAQH;;AACDC,IAAAA,MAAM,GAAG;AACL,YAAMlB,SAAS,GAAG,KAAKA,SAAvB;AACA,YAAMK,OAAO,GAAG,KAAKA,OAArB;;AACA,UAAI,EAAEA,OAAO,CAACW,MAAR,IAAkBX,OAAO,CAACc,IAAR,KAAiB5F,OAAO,CAAC6F,IAAR,CAAaC,IAAlD,CAAJ,EAA6D;AACzD;AACH;;AACD,UAAI,KAAKC,aAAT,EAAwB;AACpBC,QAAAA,YAAY,CAAC,KAAKD,aAAN,CAAZ;AACH;;AACD,WAAKA,aAAL,GAAqBjD,MAAM,CAACmD,UAAP,CAAkB,MAAM/H,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,aAAa;AACtF,cAAM,KAAKwH,WAAL,CAAiB,IAAjB,CAAN;AACAjB,QAAAA,SAAS,CAACyB,SAAV,CAAoBC,MAApB;AACH,OAHqD,CAAjC,EAGjB,GAHiB,CAArB;AAIH;;AACDC,IAAAA,IAAI,GAAG;AACH,aAAO,KAAKC,GAAZ;AACA,aAAO,KAAKrE,KAAZ;AACH;;AACDsE,IAAAA,uBAAuB,GAAG;AACtB,YAAMxB,OAAO,GAAG,KAAKA,OAArB;;AACA,UAAIA,OAAO,CAACW,MAAR,IACAX,OAAO,CAACc,IAAR,KAAiB5F,OAAO,CAAC6F,IAAR,CAAaU,MAD9B,KAECzB,OAAO,CAACyB,MAAR,CAAeC,WAAf,KAA+BxG,OAAO,CAACyG,iBAAR,CAA0BC,WAAzD,IACG5B,OAAO,CAACyB,MAAR,CAAeC,WAAf,KAA+BxG,OAAO,CAACyG,iBAAR,CAA0BE,QAH7D,CAAJ,EAG4E;AACxE,aAAKC,UAAL;AACA,eAAO,IAAP;AACH;;AACD,aAAO,KAAP;AACH;;AACDC,IAAAA,gBAAgB,CAACjF,QAAD,EAAW;AACvB,UAAIkF,EAAJ,EAAQC,EAAR;;AACA,YAAMjC,OAAO,GAAG,KAAKA,OAArB;;AACA,UAAI,EAAEA,OAAO,CAACW,MAAR,IAAkB,CAAC,CAACsB,EAAE,GAAG,CAACD,EAAE,GAAG,KAAKT,GAAX,MAAoB,IAApB,IAA4BS,EAAE,KAAK,KAAK,CAAxC,GAA4C,KAAK,CAAjD,GAAqDA,EAAE,CAACE,MAA9D,MAA0E,IAA1E,IAAkFD,EAAE,KAAK,KAAK,CAA9F,GAAkGA,EAAlG,GAAuG,CAAxG,IAA6G,CAAjI,CAAJ,EAAyI;AACrI;AACH;;AACD,aAAO9G,OAAO,CAACgH,KAAR,CAAcC,UAAd,CAAyB,EAAzB,EAA6BtF,QAAQ,GAAGA,QAAH,GAAc,KAAKuF,WAAL,EAAnD,CAAP;AACH;;AACDC,IAAAA,cAAc,CAAChH,QAAD,EAAW;AACrB,YAAM0E,OAAO,GAAG,KAAKA,OAArB;;AACA,UAAIA,OAAO,CAACW,MAAR,IAAkBX,OAAO,CAACc,IAAR,KAAiB5F,OAAO,CAAC6F,IAAR,CAAaC,IAAhD,IAAwDhB,OAAO,CAACc,IAAR,KAAiB5F,OAAO,CAAC6F,IAAR,CAAaU,MAA1F,EAAkG;AAC9F,YAAI,CAAC,KAAKc,kBAAL,CAAwBjH,QAAQ,CAACkH,WAAT,EAAxB,CAAL,EAAsD;AAClDnH,UAAAA,aAAa,CAACC,QAAD,CAAb;AACA,iBAAO,IAAP;AACH;AACJ,OALD,MAMK,IAAI0E,OAAO,CAACW,MAAR,IAAkBX,OAAO,CAACc,IAAR,KAAiB5F,OAAO,CAAC6F,IAAR,CAAaU,MAAhD,IAA0DnG,QAAQ,CAACmH,eAAvE,EAAwF;AACzF,cAAMC,IAAI,GAAGvH,OAAO,CAACwH,WAAR,CAAoBC,WAApB,CAAgCtH,QAAQ,CAACmH,eAAzC,EAA0DnH,QAAQ,CAACkH,WAAT,EAA1D,CAAb;;AACA,YAAIE,IAAI,GAAG,KAAKxC,qBAAhB,EAAuC;AACnC7E,UAAAA,aAAa,CAACC,QAAD,CAAb;AACA,iBAAO,IAAP;AACH;AACJ;;AACD,aAAO,KAAP;AACH;;AACDuH,IAAAA,kBAAkB,CAAC/F,QAAD,EAAW;AACzB,YAAMkD,OAAO,GAAG,KAAKA,OAArB;AACA,aAAQA,OAAO,CAACW,MAAR,IACJX,OAAO,CAACc,IAAR,KAAiB5F,OAAO,CAAC6F,IAAR,CAAaC,IAD1B,IAEJhB,OAAO,CAACc,IAAR,KAAiB5F,OAAO,CAAC6F,IAAR,CAAaU,MAF1B,IAGJ,KAAKc,kBAAL,CAAwBzF,QAAxB,CAHJ;AAIH;;AACDgG,IAAAA,IAAI,CAACnH,OAAD,EAAU;AACV,UAAIqG,EAAJ;;AACA,UAAI,EAAE,CAACA,EAAE,GAAG,KAAK9E,KAAX,MAAsB,IAAtB,IAA8B8E,EAAE,KAAK,KAAK,CAA1C,GAA8C,KAAK,CAAnD,GAAuDA,EAAE,CAACE,MAA5D,CAAJ,EAAyE;AACrE;AACH;;AACD,YAAMlC,OAAO,GAAG,KAAKA,OAArB;AACA,YAAM+C,WAAW,GAAG/C,OAAO,CAAC8C,IAA5B;;AACA,UAAI,EAAE9C,OAAO,CAACW,MAAR,IAAkBoC,WAAW,CAACpC,MAAhC,CAAJ,EAA6C;AACzC;AACH;;AACD,YAAM/E,OAAO,GAAG,KAAK2F,GAArB;;AACA,WAAK,MAAM1E,IAAX,IAAmB,KAAKK,KAAxB,EAA+B;AAC3B,cAAM8F,MAAM,GAAGnG,IAAI,CAACmG,MAApB;AACA,cAAMC,eAAe,GAAG,KAAKnD,eAA7B;;AACA,YAAI,CAACnE,OAAL,EAAc;AACV;AACH;;AACD,YAAIsH,eAAe,IAAID,MAAnB,IAA6B,KAAK5F,MAAtC,EAA8C;AAC1CR,UAAAA,mBAAmB,CAACjB,OAAD,EAAUqH,MAAV,EAAkBD,WAAW,CAAClH,MAA9B,EAAsC,KAAKuB,MAA3C,CAAnB;AACH,SAFD,MAGK,IAAIxB,OAAJ,EAAa;AACdF,UAAAA,eAAe,CAACC,OAAD,EAAUC,OAAV,EAAmBmH,WAAW,CAAClH,MAA/B,CAAf;AACH;AACJ;AACJ;;AACD0G,IAAAA,kBAAkB,CAACzF,QAAD,EAAW;AACzB,UAAIkF,EAAJ,EAAQC,EAAR;;AACA,YAAMtC,SAAS,GAAG,KAAKA,SAAvB;AACA,YAAMK,OAAO,GAAG,KAAKA,OAArB;;AACA,UAAI,CAACA,OAAO,CAACW,MAAT,IAAmBX,OAAO,CAACc,IAAR,KAAiB5F,OAAO,CAAC6F,IAAR,CAAaC,IAAjD,IAAyDhB,OAAO,CAACc,IAAR,KAAiB5F,OAAO,CAAC6F,IAAR,CAAaU,MAA3F,EAAmG;AAC/F,eAAO,IAAP;AACH;;AACD,UAAI,CAAC,KAAKF,GAAV,EAAe;AACX,cAAM,IAAI2B,KAAJ,CAAU/H,OAAO,CAACgI,SAAR,CAAkBC,cAA5B,CAAN;AACH;;AACD,YAAMC,UAAU,GAAG1D,SAAS,CAAC2D,MAAV,CAAiBC,IAApC;AACA,YAAMpH,CAAC,GAAG,CAAC6F,EAAE,GAAGlF,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,KAAK,CAAvC,GAA2C,KAAK,CAAhD,GAAoDA,QAAQ,CAACX,CAAnE,MAA0E,IAA1E,IAAkF6F,EAAE,KAAK,KAAK,CAA9F,GAAkGA,EAAlG,GAAuGwB,IAAI,CAACC,MAAL,KAAgBJ,UAAU,CAAC1G,KAA5I;AACA,YAAMP,CAAC,GAAG,CAAC6F,EAAE,GAAGnF,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,KAAK,CAAvC,GAA2C,KAAK,CAAhD,GAAoDA,QAAQ,CAACV,CAAnE,MAA0E,IAA1E,IAAkF6F,EAAE,KAAK,KAAK,CAA9F,GAAkGA,EAAlG,GAAuGuB,IAAI,CAACC,MAAL,KAAgBJ,UAAU,CAACxD,MAA5I;AACA,UAAI6D,MAAM,GAAG,KAAb;;AACA,WAAK,IAAI9F,CAAC,GAAG,CAAR,EAAW+F,CAAC,GAAG,KAAKpC,GAAL,CAASW,MAAT,GAAkB,CAAtC,EAAyCtE,CAAC,GAAG,KAAK2D,GAAL,CAASW,MAAtD,EAA8DyB,CAAC,GAAG/F,CAAC,EAAnE,EAAuE;AACnE,cAAMgG,EAAE,GAAG,KAAKrC,GAAL,CAAS3D,CAAT,CAAX;AACA,cAAMiG,EAAE,GAAG,KAAKtC,GAAL,CAASoC,CAAT,CAAX;AACA,cAAMG,SAAS,GAAGF,EAAE,CAACxH,CAAH,GAAOA,CAAP,KAAayH,EAAE,CAACzH,CAAH,GAAOA,CAApB,IAAyBD,CAAC,GAAI,CAAC0H,EAAE,CAAC1H,CAAH,GAAOyH,EAAE,CAACzH,CAAX,KAAiBC,CAAC,GAAGwH,EAAE,CAACxH,CAAxB,CAAD,IAAgCyH,EAAE,CAACzH,CAAH,GAAOwH,EAAE,CAACxH,CAA1C,IAA+CwH,EAAE,CAACzH,CAAjG;;AACA,YAAI2H,SAAJ,EAAe;AACXJ,UAAAA,MAAM,GAAG,CAACA,MAAV;AACH;AACJ;;AACD,aAAO1D,OAAO,CAACc,IAAR,KAAiB5F,OAAO,CAAC6F,IAAR,CAAa2C,MAA9B,GAAuCA,MAAvC,GAAgD1D,OAAO,CAACc,IAAR,KAAiB5F,OAAO,CAAC6F,IAAR,CAAagD,OAA9B,GAAwC,CAACL,MAAzC,GAAkD,KAAzG;AACH;;AACDM,IAAAA,YAAY,CAACC,GAAD,EAAMC,KAAN,EAAa;AACrB,UAAIlC,EAAJ,EAAQC,EAAR,EAAYkC,EAAZ;;AACA,YAAMC,aAAa,GAAGF,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAK,KAAK,CAAjC,GAAqCA,KAArC,GAA6C,KAAnE;;AACA,UAAI,KAAKhH,KAAL,KAAetC,SAAf,IAA4B,CAACwJ,aAAjC,EAAgD;AAC5C,eAAO,KAAK7C,GAAZ;AACH;;AACD,YAAM5B,SAAS,GAAG,KAAKA,SAAvB;AACA,YAAMK,OAAO,GAAG,KAAKA,OAArB;AACA,YAAMqE,MAAM,GAAG,IAAIC,SAAJ,EAAf;AACA,YAAMC,GAAG,GAAGF,MAAM,CAACG,eAAP,CAAuBP,GAAvB,EAA4B,eAA5B,CAAZ;AACA,YAAMQ,GAAG,GAAGF,GAAG,CAACG,oBAAJ,CAAyB,KAAzB,EAAgC,CAAhC,CAAZ;AACA,UAAIC,QAAQ,GAAGF,GAAG,CAACC,oBAAJ,CAAyB,MAAzB,CAAf;;AACA,UAAI,CAACC,QAAQ,CAACzC,MAAd,EAAsB;AAClByC,QAAAA,QAAQ,GAAGJ,GAAG,CAACG,oBAAJ,CAAyB,MAAzB,CAAX;AACH;;AACD,WAAKxH,KAAL,GAAa,EAAb;;AACA,WAAK,IAAIU,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG+G,QAAQ,CAACzC,MAA7B,EAAqCtE,CAAC,EAAtC,EAA0C;AACtC,cAAMf,IAAI,GAAG8H,QAAQ,CAACtI,IAAT,CAAcuB,CAAd,CAAb;;AACA,YAAIf,IAAJ,EAAU;AACN,eAAKK,KAAL,CAAWuC,IAAX,CAAgB;AACZlC,YAAAA,OAAO,EAAEV,IADG;AAEZqF,YAAAA,MAAM,EAAErF,IAAI,CAAC+H,cAAL;AAFI,WAAhB;AAIH;AACJ;;AACD,YAAMC,OAAO,GAAGlF,SAAS,CAACU,MAAV,CAAiBC,UAAjC;AACA,YAAMnD,KAAK,GAAG6C,OAAO,CAAC7C,KAAR,GAAgB0H,OAA9B;AACA,WAAKjF,SAAL,CAAejD,KAAf,GAAuBmI,UAAU,CAAC,CAAC9C,EAAE,GAAGyC,GAAG,CAACM,YAAJ,CAAiB,OAAjB,CAAN,MAAqC,IAArC,IAA6C/C,EAAE,KAAK,KAAK,CAAzD,GAA6DA,EAA7D,GAAkE,GAAnE,CAAV,GAAoF7E,KAA3G;AACA,WAAKyC,SAAL,CAAeC,MAAf,GAAwBiF,UAAU,CAAC,CAAC7C,EAAE,GAAGwC,GAAG,CAACM,YAAJ,CAAiB,QAAjB,CAAN,MAAsC,IAAtC,IAA8C9C,EAAE,KAAK,KAAK,CAA1D,GAA8DA,EAA9D,GAAmE,GAApE,CAAV,GAAqF9E,KAA7G;AACA,YAAML,QAAQ,GAAG,CAACqH,EAAE,GAAGnE,OAAO,CAAClD,QAAd,MAA4B,IAA5B,IAAoCqH,EAAE,KAAK,KAAK,CAAhD,GAAoDA,EAApD,GAAyD;AACtEhI,QAAAA,CAAC,EAAE,EADmE;AAEtEC,QAAAA,CAAC,EAAE;AAFmE,OAA1E;AAIA,WAAKgB,MAAL,GAAc;AACVjB,QAAAA,CAAC,EAAGwD,SAAS,CAAC2D,MAAV,CAAiBC,IAAjB,CAAsB5G,KAAtB,GAA8BG,QAAQ,CAACX,CAAxC,IAA8C,MAAM0I,OAApD,IAA+D,KAAKjF,SAAL,CAAejD,KAAf,GAAuB,CAD/E;AAEVP,QAAAA,CAAC,EAAGuD,SAAS,CAAC2D,MAAV,CAAiBC,IAAjB,CAAsB1D,MAAtB,GAA+B/C,QAAQ,CAACV,CAAzC,IAA+C,MAAMyI,OAArD,IAAgE,KAAKjF,SAAL,CAAeC,MAAf,GAAwB;AAFjF,OAAd;AAIA,aAAO5C,UAAU,CAAC,KAAKC,KAAN,EAAaC,KAAb,EAAoB,KAAKC,MAAzB,CAAjB;AACH;;AACD4H,IAAAA,eAAe,CAACC,MAAD,EAASf,KAAT,EAAgB;AAC3B,aAAO9K,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,aAAa;AAChD,cAAM4G,OAAO,GAAG,KAAKA,OAArB;AACA,cAAMkF,GAAG,GAAGD,MAAM,IAAIjF,OAAO,CAACkF,GAA9B;AACA,cAAMd,aAAa,GAAGF,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAK,KAAK,CAAjC,GAAqCA,KAArC,GAA6C,KAAnE;;AACA,YAAI,CAACgB,GAAD,IAAS,KAAKhI,KAAL,KAAetC,SAAf,IAA4B,CAACwJ,aAA1C,EAA0D;AACtD,iBAAO,KAAK7C,GAAZ;AACH;;AACD,cAAM4D,GAAG,GAAG,MAAMC,KAAK,CAACF,GAAD,CAAvB;;AACA,YAAI,CAACC,GAAG,CAACE,EAAT,EAAa;AACT,gBAAM,IAAInC,KAAJ,CAAU,iEAAV,CAAN;AACH;;AACD,eAAO,KAAKc,YAAL,CAAkB,MAAMmB,GAAG,CAACG,IAAJ,EAAxB,EAAoCpB,KAApC,CAAP;AACH,OAZe,CAAhB;AAaH;;AACDpC,IAAAA,UAAU,GAAG;AACT,UAAI,CAAC,KAAKP,GAAV,EAAe;AACX;AACH;;AACD,WAAK,MAAMlF,IAAX,IAAmB,KAAKkF,GAAxB,EAA6B;AACzB,aAAK5B,SAAL,CAAeyB,SAAf,CAAyBmE,WAAzB,CAAqC;AACjCpJ,UAAAA,CAAC,EAAEE,IAAI,CAACF,CADyB;AAEjCC,UAAAA,CAAC,EAAEC,IAAI,CAACD;AAFyB,SAArC;AAIH;AACJ;;AACDiG,IAAAA,WAAW,GAAG;AACV,YAAM1C,SAAS,GAAG,KAAKA,SAAvB;AACA,YAAMK,OAAO,GAAG,KAAKA,OAArB;AACA,UAAIlD,QAAJ;;AACA,UAAIkD,OAAO,CAACc,IAAR,KAAiB5F,OAAO,CAAC6F,IAAR,CAAaU,MAAlC,EAA0C;AACtC,gBAAQzB,OAAO,CAACyB,MAAR,CAAeC,WAAvB;AACI,eAAKxG,OAAO,CAACyG,iBAAR,CAA0BU,WAA/B;AACIvF,YAAAA,QAAQ,GAAG,KAAK0I,cAAL,EAAX;AACA;;AACJ,eAAKtK,OAAO,CAACyG,iBAAR,CAA0B8D,YAA/B;AACI3I,YAAAA,QAAQ,GAAG,KAAK4I,sBAAL,EAAX;AACA;;AACJ,eAAKxK,OAAO,CAACyG,iBAAR,CAA0BgE,WAA/B;AACI7I,YAAAA,QAAQ,GAAG,KAAK8I,0BAAL,CAAgCjG,SAAS,CAACyB,SAAV,CAAoByE,KAApD,CAAX;AACA;;AACJ,eAAK3K,OAAO,CAACyG,iBAAR,CAA0BC,WAA/B;AACA,eAAK1G,OAAO,CAACyG,iBAAR,CAA0BE,QAA/B;AACA;AACI/E,YAAAA,QAAQ,GAAG,KAAKgJ,eAAL,CAAqBnG,SAAS,CAACyB,SAAV,CAAoByE,KAAzC,CAAX;AAbR;AAeH,OAhBD,MAiBK;AACD/I,QAAAA,QAAQ,GAAG;AACPX,UAAAA,CAAC,EAAEqH,IAAI,CAACC,MAAL,KAAgB9D,SAAS,CAAC2D,MAAV,CAAiBC,IAAjB,CAAsB5G,KADlC;AAEPP,UAAAA,CAAC,EAAEoH,IAAI,CAACC,MAAL,KAAgB9D,SAAS,CAAC2D,MAAV,CAAiBC,IAAjB,CAAsB1D;AAFlC,SAAX;AAIH;;AACD,UAAI,KAAK0C,kBAAL,CAAwBzF,QAAxB,CAAJ,EAAuC;AACnC,eAAOA,QAAP;AACH,OAFD,MAGK;AACD,eAAO,KAAKuF,WAAL,EAAP;AACH;AACJ;;AACDmD,IAAAA,cAAc,GAAG;AACb,UAAI,CAAC,KAAKjE,GAAN,IAAa,CAAC,KAAKA,GAAL,CAASW,MAA3B,EAAmC;AAC/B,cAAM,IAAIgB,KAAJ,CAAU/H,OAAO,CAACgI,SAAR,CAAkB4C,mBAA5B,CAAN;AACH;;AACD,YAAMC,MAAM,GAAG7K,OAAO,CAACgH,KAAR,CAAc8D,aAAd,CAA4B,KAAK1E,GAAjC,CAAf;AACA,aAAO;AACHpF,QAAAA,CAAC,EAAE6J,MAAM,CAAC7J,CADP;AAEHC,QAAAA,CAAC,EAAE4J,MAAM,CAAC5J;AAFP,OAAP;AAIH;;AACDsJ,IAAAA,sBAAsB,GAAG;AACrB,UAAI1D,EAAJ,EAAQC,EAAR,EAAYkC,EAAZ;;AACA,YAAMnE,OAAO,GAAG,KAAKA,OAArB;;AACA,UAAI,CAAC,KAAKuB,GAAN,IAAa,CAAC,KAAKA,GAAL,CAASW,MAAvB,IAAiC,EAAE,CAACF,EAAE,GAAG,KAAK9E,KAAX,MAAsB,IAAtB,IAA8B8E,EAAE,KAAK,KAAK,CAA1C,GAA8C,KAAK,CAAnD,GAAuDA,EAAE,CAACE,MAA5D,CAArC,EAA0G;AACtG,cAAM,IAAIgB,KAAJ,CAAU/H,OAAO,CAACgI,SAAR,CAAkB4C,mBAA5B,CAAN;AACH;;AACD,YAAMlJ,IAAI,GAAG1B,OAAO,CAACgH,KAAR,CAAc8D,aAAd,CAA4B,KAAK/I,KAAjC,CAAb;AACA,YAAMgJ,QAAQ,GAAG1C,IAAI,CAAC2C,KAAL,CAAW3C,IAAI,CAACC,MAAL,KAAgB5G,IAAI,CAACqF,MAAhC,IAA0C,CAA3D;AACA,YAAMkE,KAAK,GAAGvJ,IAAI,CAACU,OAAL,CAAa8I,gBAAb,CAA8BH,QAA9B,CAAd;AACA,aAAO;AACH/J,QAAAA,CAAC,EAAEiK,KAAK,CAACjK,CAAN,GAAU6D,OAAO,CAAC7C,KAAlB,IAA2B,CAAC,CAAC8E,EAAE,GAAG,KAAK7E,MAAX,MAAuB,IAAvB,IAA+B6E,EAAE,KAAK,KAAK,CAA3C,GAA+C,KAAK,CAApD,GAAwDA,EAAE,CAAC9F,CAA5D,KAAkE,CAA7F,CADA;AAEHC,QAAAA,CAAC,EAAEgK,KAAK,CAAChK,CAAN,GAAU4D,OAAO,CAAC7C,KAAlB,IAA2B,CAAC,CAACgH,EAAE,GAAG,KAAK/G,MAAX,MAAuB,IAAvB,IAA+B+G,EAAE,KAAK,KAAK,CAA3C,GAA+C,KAAK,CAApD,GAAwDA,EAAE,CAAC/H,CAA5D,KAAkE,CAA7F;AAFA,OAAP;AAIH;;AACDwJ,IAAAA,0BAA0B,CAACU,KAAD,EAAQ;AAC9B,UAAItE,EAAJ,EAAQC,EAAR,EAAYkC,EAAZ,EAAgBoC,EAAhB,EAAoBC,EAApB,EAAwBC,EAAxB,EAA4BC,EAA5B;;AACA,YAAM1G,OAAO,GAAG,KAAKL,SAAL,CAAeK,OAA/B;AACA,YAAMU,kBAAkB,GAAG,KAAKV,OAAhC;AACA,UAAI,CAAC,KAAKuB,GAAN,IAAa,CAAC,KAAKA,GAAL,CAASW,MAAvB,IAAiC,EAAE,CAACF,EAAE,GAAG,KAAK9E,KAAX,MAAsB,IAAtB,IAA8B8E,EAAE,KAAK,KAAK,CAA1C,GAA8C,KAAK,CAAnD,GAAuDA,EAAE,CAACE,MAA5D,CAArC,EACI,MAAM,IAAIgB,KAAJ,CAAU/H,OAAO,CAACgI,SAAR,CAAkB4C,mBAA5B,CAAN;AACJ,UAAI3I,MAAM,GAAG,CAAb;AACA,UAAIgJ,KAAJ;AACA,YAAMO,WAAW,GAAG,KAAKzJ,KAAL,CAAW0J,MAAX,CAAkB,CAACC,GAAD,EAAMhK,IAAN,KAAegK,GAAG,GAAGhK,IAAI,CAACqF,MAA5C,EAAoD,CAApD,CAApB;AACA,YAAMgE,QAAQ,GAAGS,WAAW,GAAG3G,OAAO,CAACoB,SAAR,CAAkB0F,MAAlB,CAAyBpN,KAAxD;;AACA,WAAK,MAAMmD,IAAX,IAAmB,KAAKK,KAAxB,EAA+B;AAC3B,cAAM6J,YAAY,GAAGb,QAAQ,GAAGI,KAAX,GAAmBlJ,MAAxC;;AACA,YAAI2J,YAAY,IAAIlK,IAAI,CAACqF,MAAzB,EAAiC;AAC7BkE,UAAAA,KAAK,GAAGvJ,IAAI,CAACU,OAAL,CAAa8I,gBAAb,CAA8BU,YAA9B,CAAR;AACA;AACH,SAHD,MAIK;AACD3J,UAAAA,MAAM,IAAIP,IAAI,CAACqF,MAAf;AACH;AACJ;;AACD,aAAO;AACH/F,QAAAA,CAAC,EAAE,CAAC,CAAC8F,EAAE,GAAGmE,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAK,KAAK,CAAjC,GAAqC,KAAK,CAA1C,GAA8CA,KAAK,CAACjK,CAA1D,MAAiE,IAAjE,IAAyE8F,EAAE,KAAK,KAAK,CAArF,GAAyFA,EAAzF,GAA8F,CAA/F,IAAoGvB,kBAAkB,CAACvD,KAAvH,IAAgI,CAACoJ,EAAE,GAAG,CAACpC,EAAE,GAAG,KAAK/G,MAAX,MAAuB,IAAvB,IAA+B+G,EAAE,KAAK,KAAK,CAA3C,GAA+C,KAAK,CAApD,GAAwDA,EAAE,CAAChI,CAAjE,MAAwE,IAAxE,IAAgFoK,EAAE,KAAK,KAAK,CAA5F,GAAgGA,EAAhG,GAAqG,CAArO,CADA;AAEHnK,QAAAA,CAAC,EAAE,CAAC,CAACoK,EAAE,GAAGJ,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAK,KAAK,CAAjC,GAAqC,KAAK,CAA1C,GAA8CA,KAAK,CAAChK,CAA1D,MAAiE,IAAjE,IAAyEoK,EAAE,KAAK,KAAK,CAArF,GAAyFA,EAAzF,GAA8F,CAA/F,IAAoG9F,kBAAkB,CAACvD,KAAvH,IAAgI,CAACuJ,EAAE,GAAG,CAACD,EAAE,GAAG,KAAKrJ,MAAX,MAAuB,IAAvB,IAA+BqJ,EAAE,KAAK,KAAK,CAA3C,GAA+C,KAAK,CAApD,GAAwDA,EAAE,CAACrK,CAAjE,MAAwE,IAAxE,IAAgFsK,EAAE,KAAK,KAAK,CAA5F,GAAgGA,EAAhG,GAAqG,CAArO;AAFA,OAAP;AAIH;;AACDZ,IAAAA,eAAe,CAACQ,KAAD,EAAQ;AACnB,UAAI,CAAC,KAAK/E,GAAN,IAAa,CAAC,KAAKA,GAAL,CAASW,MAA3B,EAAmC;AAC/B,cAAM,IAAIgB,KAAJ,CAAU/H,OAAO,CAACgI,SAAR,CAAkB4C,mBAA5B,CAAN;AACH;;AACD,YAAMC,MAAM,GAAG,KAAKzE,GAAL,CAAS+E,KAAK,GAAG,KAAK/E,GAAL,CAASW,MAA1B,CAAf;AACA,aAAO;AACH/F,QAAAA,CAAC,EAAE6J,MAAM,CAAC7J,CADP;AAEHC,QAAAA,CAAC,EAAE4J,MAAM,CAAC5J;AAFP,OAAP;AAIH;;AACD4K,IAAAA,YAAY,GAAG;AACX,UAAIhF,EAAJ,EAAQC,EAAR;;AACA,YAAMjC,OAAO,GAAG,KAAKA,OAArB;;AACA,UAAI,CAAC,KAAKF,eAAN,IAAyB,EAAE,CAACkC,EAAE,GAAG,KAAK9E,KAAX,MAAsB,IAAtB,IAA8B8E,EAAE,KAAK,KAAK,CAA1C,GAA8C,KAAK,CAAnD,GAAuDA,EAAE,CAACE,MAA5D,CAA7B,EAAkG;AAC9F;AACH;;AACD,WAAK,MAAMrF,IAAX,IAAmB,KAAKK,KAAxB,EAA+B;AAC3B,cAAM+J,QAAQ,GAAG,CAAChF,EAAE,GAAGpF,IAAI,CAACU,OAAX,MAAwB,IAAxB,IAAgC0E,EAAE,KAAK,KAAK,CAA5C,GAAgD,KAAK,CAArD,GAAyDA,EAAE,CAAC8C,YAAH,CAAgB,GAAhB,CAA1E;;AACA,YAAIkC,QAAJ,EAAc;AACV,gBAAMjE,MAAM,GAAG,IAAIjD,MAAJ,CAAWkH,QAAX,CAAf;AACA,gBAAMC,MAAM,GAAGC,QAAQ,CAACC,eAAT,CAAyB,4BAAzB,EAAuD,KAAvD,EAA8DC,eAA9D,EAAf;AACA,gBAAMC,SAAS,GAAG,IAAIvH,MAAJ,EAAlB;AACA,gBAAMwH,SAAS,GAAGL,MAAM,CAAC/J,KAAP,CAAa6C,OAAO,CAAC7C,KAArB,CAAlB;;AACA,cAAImK,SAAS,CAACE,OAAd,EAAuB;AACnBF,YAAAA,SAAS,CAACE,OAAV,CAAkBxE,MAAlB,EAA0BuE,SAA1B;AACA1K,YAAAA,IAAI,CAACmG,MAAL,GAAcsE,SAAd;AACH,WAHD,MAIK;AACD,mBAAOzK,IAAI,CAACmG,MAAZ;AACH;AACJ,SAZD,MAaK;AACD,iBAAOnG,IAAI,CAACmG,MAAZ;AACH;;AACD,YAAInG,IAAI,CAACmG,MAAL,IAAe,CAAC,KAAKzB,GAAzB,EAA8B;AAC1B;AACH;;AACD1E,QAAAA,IAAI,CAACmG,MAAL,GAAc,IAAIjD,MAAJ,EAAd;AACAlD,QAAAA,IAAI,CAACmG,MAAL,CAAY9G,MAAZ,CAAmB,KAAKqF,GAAL,CAAS,CAAT,EAAYpF,CAA/B,EAAkC,KAAKoF,GAAL,CAAS,CAAT,EAAYnF,CAA9C;AACA,aAAKmF,GAAL,CAASkG,OAAT,CAAiB,CAACC,GAAD,EAAM9J,CAAN,KAAY;AACzB,cAAIoE,EAAJ;;AACA,cAAIpE,CAAC,GAAG,CAAR,EAAW;AACP,aAACoE,EAAE,GAAGnF,IAAI,CAACmG,MAAX,MAAuB,IAAvB,IAA+BhB,EAAE,KAAK,KAAK,CAA3C,GAA+C,KAAK,CAApD,GAAwDA,EAAE,CAAC1F,MAAH,CAAUoL,GAAG,CAACvL,CAAd,EAAiBuL,GAAG,CAACtL,CAArB,CAAxD;AACH;AACJ,SALD;AAMAS,QAAAA,IAAI,CAACmG,MAAL,CAAYzG,SAAZ;AACH;AACJ;;AACDqE,IAAAA,WAAW,CAACsD,KAAD,EAAQ;AACf,aAAO9K,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,aAAa;AAChD,cAAM4G,OAAO,GAAG,KAAKA,OAArB;;AACA,YAAIA,OAAO,CAACkF,GAAZ,EAAiB;AACb,eAAK3D,GAAL,GAAW,MAAM,KAAKyD,eAAL,CAAqBhF,OAAO,CAACkF,GAA7B,EAAkChB,KAAlC,CAAjB;AACH,SAFD,MAGK,IAAIlE,OAAO,CAAC2H,IAAZ,EAAkB;AACnB,gBAAMA,IAAI,GAAG3H,OAAO,CAAC2H,IAArB;AACA,cAAIlD,GAAJ;;AACA,cAAI,OAAOkD,IAAP,KAAgB,QAApB,EAA8B;AAC1B,kBAAM9K,IAAI,GAAG8K,IAAI,CAAC9K,IAAL,YAAqB+K,KAArB,GACPD,IAAI,CAAC9K,IAAL,CAAUgL,GAAV,CAAeC,CAAD,IAAQ,YAAWA,CAAE,MAAnC,EAA0CC,IAA1C,CAA+C,EAA/C,CADO,GAEN,YAAWJ,IAAI,CAAC9K,IAAK,MAF5B;AAGA,kBAAMmL,UAAU,GAAG,+EAAnB;AACAvD,YAAAA,GAAG,GAAI,QAAOuD,UAAW,WAAUL,IAAI,CAACpE,IAAL,CAAU5G,KAAM,aAAYgL,IAAI,CAACpE,IAAL,CAAU1D,MAAO,KAAIhD,IAAK,QAAzF;AACH,WAND,MAOK;AACD4H,YAAAA,GAAG,GAAGkD,IAAN;AACH;;AACD,eAAKpG,GAAL,GAAW,KAAKyC,YAAL,CAAkBS,GAAlB,EAAuBP,KAAvB,CAAX;AACH;;AACD,aAAK8C,YAAL;AACH,OArBe,CAAhB;AAsBH;;AA9VqB;;AAgW1BvM,EAAAA,OAAO,CAACQ,mBAAR,GAA8BA,mBAA9B;AACH,CA1cD","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n(function (factory) {\n    if (typeof module === \"object\" && typeof module.exports === \"object\") {\n        var v = factory(require, exports);\n        if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === \"function\" && define.amd) {\n        define([\"require\", \"exports\", \"./Enums\", \"../../Utils\", \"./Options/Classes/PolygonMask\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.PolygonMaskInstance = void 0;\n    const Enums_1 = require(\"./Enums\");\n    const Utils_1 = require(\"../../Utils\");\n    const PolygonMask_1 = require(\"./Options/Classes/PolygonMask\");\n    function polygonBounce(particle) {\n        particle.velocity.horizontal = particle.velocity.vertical / 2 - particle.velocity.horizontal;\n        particle.velocity.vertical = particle.velocity.horizontal / 2 - particle.velocity.vertical;\n    }\n    function drawPolygonMask(context, rawData, stroke) {\n        const color = Utils_1.ColorUtils.colorToRgb(stroke.color);\n        if (!color) {\n            return;\n        }\n        context.beginPath();\n        context.moveTo(rawData[0].x, rawData[0].y);\n        for (const item of rawData) {\n            context.lineTo(item.x, item.y);\n        }\n        context.closePath();\n        context.strokeStyle = Utils_1.ColorUtils.getStyleFromRgb(color);\n        context.lineWidth = stroke.width;\n        context.stroke();\n    }\n    function drawPolygonMaskPath(context, path, stroke, position) {\n        context.translate(position.x, position.y);\n        const color = Utils_1.ColorUtils.colorToRgb(stroke.color);\n        if (!color) {\n            return;\n        }\n        context.strokeStyle = Utils_1.ColorUtils.getStyleFromRgb(color, stroke.opacity);\n        context.lineWidth = stroke.width;\n        context.stroke(path);\n    }\n    function parsePaths(paths, scale, offset) {\n        const res = [];\n        for (const path of paths) {\n            const segments = path.element.pathSegList;\n            const len = segments.numberOfItems;\n            const p = {\n                x: 0,\n                y: 0,\n            };\n            for (let i = 0; i < len; i++) {\n                const segment = segments.getItem(i);\n                const svgPathSeg = window.SVGPathSeg;\n                switch (segment.pathSegType) {\n                    case svgPathSeg.PATHSEG_MOVETO_ABS:\n                    case svgPathSeg.PATHSEG_LINETO_ABS:\n                    case svgPathSeg.PATHSEG_CURVETO_CUBIC_ABS:\n                    case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS:\n                    case svgPathSeg.PATHSEG_ARC_ABS:\n                    case svgPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS:\n                    case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS: {\n                        const absSeg = segment;\n                        p.x = absSeg.x;\n                        p.y = absSeg.y;\n                        break;\n                    }\n                    case svgPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS:\n                        p.x = segment.x;\n                        break;\n                    case svgPathSeg.PATHSEG_LINETO_VERTICAL_ABS:\n                        p.y = segment.y;\n                        break;\n                    case svgPathSeg.PATHSEG_LINETO_REL:\n                    case svgPathSeg.PATHSEG_MOVETO_REL:\n                    case svgPathSeg.PATHSEG_CURVETO_CUBIC_REL:\n                    case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_REL:\n                    case svgPathSeg.PATHSEG_ARC_REL:\n                    case svgPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL:\n                    case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL: {\n                        const relSeg = segment;\n                        p.x += relSeg.x;\n                        p.y += relSeg.y;\n                        break;\n                    }\n                    case svgPathSeg.PATHSEG_LINETO_HORIZONTAL_REL:\n                        p.x += segment.x;\n                        break;\n                    case svgPathSeg.PATHSEG_LINETO_VERTICAL_REL:\n                        p.y += segment.y;\n                        break;\n                    case svgPathSeg.PATHSEG_UNKNOWN:\n                    case svgPathSeg.PATHSEG_CLOSEPATH:\n                        continue;\n                }\n                res.push({\n                    x: p.x * scale + offset.x,\n                    y: p.y * scale + offset.y,\n                });\n            }\n        }\n        return res;\n    }\n    class PolygonMaskInstance {\n        constructor(container) {\n            this.container = container;\n            this.dimension = {\n                height: 0,\n                width: 0,\n            };\n            this.path2DSupported = !!window.Path2D;\n            this.options = new PolygonMask_1.PolygonMask();\n            this.polygonMaskMoveRadius = this.options.move.radius * container.retina.pixelRatio;\n        }\n        initAsync(options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                this.options.load(options === null || options === void 0 ? void 0 : options.polygon);\n                const polygonMaskOptions = this.options;\n                this.polygonMaskMoveRadius = polygonMaskOptions.move.radius * this.container.retina.pixelRatio;\n                if (polygonMaskOptions.enable) {\n                    yield this.initRawData();\n                }\n            });\n        }\n        resize() {\n            const container = this.container;\n            const options = this.options;\n            if (!(options.enable && options.type !== Enums_1.Type.none)) {\n                return;\n            }\n            if (this.redrawTimeout) {\n                clearTimeout(this.redrawTimeout);\n            }\n            this.redrawTimeout = window.setTimeout(() => __awaiter(this, void 0, void 0, function* () {\n                yield this.initRawData(true);\n                container.particles.redraw();\n            }), 250);\n        }\n        stop() {\n            delete this.raw;\n            delete this.paths;\n        }\n        particlesInitialization() {\n            const options = this.options;\n            if (options.enable &&\n                options.type === Enums_1.Type.inline &&\n                (options.inline.arrangement === Enums_1.InlineArrangement.onePerPoint ||\n                    options.inline.arrangement === Enums_1.InlineArrangement.perPoint)) {\n                this.drawPoints();\n                return true;\n            }\n            return false;\n        }\n        particlePosition(position) {\n            var _a, _b;\n            const options = this.options;\n            if (!(options.enable && ((_b = (_a = this.raw) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 0)) {\n                return;\n            }\n            return Utils_1.Utils.deepExtend({}, position ? position : this.randomPoint());\n        }\n        particleBounce(particle) {\n            const options = this.options;\n            if (options.enable && options.type !== Enums_1.Type.none && options.type !== Enums_1.Type.inline) {\n                if (!this.checkInsidePolygon(particle.getPosition())) {\n                    polygonBounce(particle);\n                    return true;\n                }\n            }\n            else if (options.enable && options.type === Enums_1.Type.inline && particle.initialPosition) {\n                const dist = Utils_1.NumberUtils.getDistance(particle.initialPosition, particle.getPosition());\n                if (dist > this.polygonMaskMoveRadius) {\n                    polygonBounce(particle);\n                    return true;\n                }\n            }\n            return false;\n        }\n        clickPositionValid(position) {\n            const options = this.options;\n            return (options.enable &&\n                options.type !== Enums_1.Type.none &&\n                options.type !== Enums_1.Type.inline &&\n                this.checkInsidePolygon(position));\n        }\n        draw(context) {\n            var _a;\n            if (!((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n                return;\n            }\n            const options = this.options;\n            const polygonDraw = options.draw;\n            if (!(options.enable && polygonDraw.enable)) {\n                return;\n            }\n            const rawData = this.raw;\n            for (const path of this.paths) {\n                const path2d = path.path2d;\n                const path2dSupported = this.path2DSupported;\n                if (!context) {\n                    continue;\n                }\n                if (path2dSupported && path2d && this.offset) {\n                    drawPolygonMaskPath(context, path2d, polygonDraw.stroke, this.offset);\n                }\n                else if (rawData) {\n                    drawPolygonMask(context, rawData, polygonDraw.stroke);\n                }\n            }\n        }\n        checkInsidePolygon(position) {\n            var _a, _b;\n            const container = this.container;\n            const options = this.options;\n            if (!options.enable || options.type === Enums_1.Type.none || options.type === Enums_1.Type.inline) {\n                return true;\n            }\n            if (!this.raw) {\n                throw new Error(Utils_1.Constants.noPolygonFound);\n            }\n            const canvasSize = container.canvas.size;\n            const x = (_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width;\n            const y = (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height;\n            let inside = false;\n            for (let i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n                const pi = this.raw[i];\n                const pj = this.raw[j];\n                const intersect = pi.y > y !== pj.y > y && x < ((pj.x - pi.x) * (y - pi.y)) / (pj.y - pi.y) + pi.x;\n                if (intersect) {\n                    inside = !inside;\n                }\n            }\n            return options.type === Enums_1.Type.inside ? inside : options.type === Enums_1.Type.outside ? !inside : false;\n        }\n        parseSvgPath(xml, force) {\n            var _a, _b, _c;\n            const forceDownload = force !== null && force !== void 0 ? force : false;\n            if (this.paths !== undefined && !forceDownload) {\n                return this.raw;\n            }\n            const container = this.container;\n            const options = this.options;\n            const parser = new DOMParser();\n            const doc = parser.parseFromString(xml, \"image/svg+xml\");\n            const svg = doc.getElementsByTagName(\"svg\")[0];\n            let svgPaths = svg.getElementsByTagName(\"path\");\n            if (!svgPaths.length) {\n                svgPaths = doc.getElementsByTagName(\"path\");\n            }\n            this.paths = [];\n            for (let i = 0; i < svgPaths.length; i++) {\n                const path = svgPaths.item(i);\n                if (path) {\n                    this.paths.push({\n                        element: path,\n                        length: path.getTotalLength(),\n                    });\n                }\n            }\n            const pxRatio = container.retina.pixelRatio;\n            const scale = options.scale / pxRatio;\n            this.dimension.width = parseFloat((_a = svg.getAttribute(\"width\")) !== null && _a !== void 0 ? _a : \"0\") * scale;\n            this.dimension.height = parseFloat((_b = svg.getAttribute(\"height\")) !== null && _b !== void 0 ? _b : \"0\") * scale;\n            const position = (_c = options.position) !== null && _c !== void 0 ? _c : {\n                x: 50,\n                y: 50,\n            };\n            this.offset = {\n                x: (container.canvas.size.width * position.x) / (100 * pxRatio) - this.dimension.width / 2,\n                y: (container.canvas.size.height * position.y) / (100 * pxRatio) - this.dimension.height / 2,\n            };\n            return parsePaths(this.paths, scale, this.offset);\n        }\n        downloadSvgPath(svgUrl, force) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const options = this.options;\n                const url = svgUrl || options.url;\n                const forceDownload = force !== null && force !== void 0 ? force : false;\n                if (!url || (this.paths !== undefined && !forceDownload)) {\n                    return this.raw;\n                }\n                const req = yield fetch(url);\n                if (!req.ok) {\n                    throw new Error(\"tsParticles Error - Error occurred during polygon mask download\");\n                }\n                return this.parseSvgPath(yield req.text(), force);\n            });\n        }\n        drawPoints() {\n            if (!this.raw) {\n                return;\n            }\n            for (const item of this.raw) {\n                this.container.particles.addParticle({\n                    x: item.x,\n                    y: item.y,\n                });\n            }\n        }\n        randomPoint() {\n            const container = this.container;\n            const options = this.options;\n            let position;\n            if (options.type === Enums_1.Type.inline) {\n                switch (options.inline.arrangement) {\n                    case Enums_1.InlineArrangement.randomPoint:\n                        position = this.getRandomPoint();\n                        break;\n                    case Enums_1.InlineArrangement.randomLength:\n                        position = this.getRandomPointByLength();\n                        break;\n                    case Enums_1.InlineArrangement.equidistant:\n                        position = this.getEquidistantPointByIndex(container.particles.count);\n                        break;\n                    case Enums_1.InlineArrangement.onePerPoint:\n                    case Enums_1.InlineArrangement.perPoint:\n                    default:\n                        position = this.getPointByIndex(container.particles.count);\n                }\n            }\n            else {\n                position = {\n                    x: Math.random() * container.canvas.size.width,\n                    y: Math.random() * container.canvas.size.height,\n                };\n            }\n            if (this.checkInsidePolygon(position)) {\n                return position;\n            }\n            else {\n                return this.randomPoint();\n            }\n        }\n        getRandomPoint() {\n            if (!this.raw || !this.raw.length) {\n                throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n            }\n            const coords = Utils_1.Utils.itemFromArray(this.raw);\n            return {\n                x: coords.x,\n                y: coords.y,\n            };\n        }\n        getRandomPointByLength() {\n            var _a, _b, _c;\n            const options = this.options;\n            if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n                throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n            }\n            const path = Utils_1.Utils.itemFromArray(this.paths);\n            const distance = Math.floor(Math.random() * path.length) + 1;\n            const point = path.element.getPointAtLength(distance);\n            return {\n                x: point.x * options.scale + (((_b = this.offset) === null || _b === void 0 ? void 0 : _b.x) || 0),\n                y: point.y * options.scale + (((_c = this.offset) === null || _c === void 0 ? void 0 : _c.y) || 0),\n            };\n        }\n        getEquidistantPointByIndex(index) {\n            var _a, _b, _c, _d, _e, _f, _g;\n            const options = this.container.options;\n            const polygonMaskOptions = this.options;\n            if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length))\n                throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n            let offset = 0;\n            let point;\n            const totalLength = this.paths.reduce((tot, path) => tot + path.length, 0);\n            const distance = totalLength / options.particles.number.value;\n            for (const path of this.paths) {\n                const pathDistance = distance * index - offset;\n                if (pathDistance <= path.length) {\n                    point = path.element.getPointAtLength(pathDistance);\n                    break;\n                }\n                else {\n                    offset += path.length;\n                }\n            }\n            return {\n                x: ((_b = point === null || point === void 0 ? void 0 : point.x) !== null && _b !== void 0 ? _b : 0) * polygonMaskOptions.scale + ((_d = (_c = this.offset) === null || _c === void 0 ? void 0 : _c.x) !== null && _d !== void 0 ? _d : 0),\n                y: ((_e = point === null || point === void 0 ? void 0 : point.y) !== null && _e !== void 0 ? _e : 0) * polygonMaskOptions.scale + ((_g = (_f = this.offset) === null || _f === void 0 ? void 0 : _f.y) !== null && _g !== void 0 ? _g : 0),\n            };\n        }\n        getPointByIndex(index) {\n            if (!this.raw || !this.raw.length) {\n                throw new Error(Utils_1.Constants.noPolygonDataLoaded);\n            }\n            const coords = this.raw[index % this.raw.length];\n            return {\n                x: coords.x,\n                y: coords.y,\n            };\n        }\n        createPath2D() {\n            var _a, _b;\n            const options = this.options;\n            if (!this.path2DSupported || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n                return;\n            }\n            for (const path of this.paths) {\n                const pathData = (_b = path.element) === null || _b === void 0 ? void 0 : _b.getAttribute(\"d\");\n                if (pathData) {\n                    const path2d = new Path2D(pathData);\n                    const matrix = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\").createSVGMatrix();\n                    const finalPath = new Path2D();\n                    const transform = matrix.scale(options.scale);\n                    if (finalPath.addPath) {\n                        finalPath.addPath(path2d, transform);\n                        path.path2d = finalPath;\n                    }\n                    else {\n                        delete path.path2d;\n                    }\n                }\n                else {\n                    delete path.path2d;\n                }\n                if (path.path2d || !this.raw) {\n                    continue;\n                }\n                path.path2d = new Path2D();\n                path.path2d.moveTo(this.raw[0].x, this.raw[0].y);\n                this.raw.forEach((pos, i) => {\n                    var _a;\n                    if (i > 0) {\n                        (_a = path.path2d) === null || _a === void 0 ? void 0 : _a.lineTo(pos.x, pos.y);\n                    }\n                });\n                path.path2d.closePath();\n            }\n        }\n        initRawData(force) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const options = this.options;\n                if (options.url) {\n                    this.raw = yield this.downloadSvgPath(options.url, force);\n                }\n                else if (options.data) {\n                    const data = options.data;\n                    let svg;\n                    if (typeof data !== \"string\") {\n                        const path = data.path instanceof Array\n                            ? data.path.map((t) => `<path d=\"${t}\" />`).join(\"\")\n                            : `<path d=\"${data.path}\" />`;\n                        const namespaces = 'xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"';\n                        svg = `<svg ${namespaces} width=\"${data.size.width}\" height=\"${data.size.height}\">${path}</svg>`;\n                    }\n                    else {\n                        svg = data;\n                    }\n                    this.raw = this.parseSvgPath(svg, force);\n                }\n                this.createPath2D();\n            });\n        }\n    }\n    exports.PolygonMaskInstance = PolygonMaskInstance;\n});\n"]},"metadata":{},"sourceType":"script"}