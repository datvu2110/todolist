{"ast":null,"code":"(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define([\"require\", \"exports\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.Infecter = void 0;\n\n  class Infecter {\n    constructor(container) {\n      this.container = container;\n    }\n\n    startInfection(stage) {\n      const options = this.container.options;\n      const stages = options.infection.stages;\n      const stagesCount = stages.length;\n\n      if (stage > stagesCount || stage < 0) {\n        return;\n      }\n\n      this.infectionDelay = 0;\n      this.infectionDelayStage = stage;\n    }\n\n    updateInfectionStage(stage) {\n      const options = this.container.options;\n      const stagesCount = options.infection.stages.length;\n\n      if (stage > stagesCount || stage < 0 || this.infectionStage !== undefined && this.infectionStage > stage) {\n        return;\n      }\n\n      this.infectionStage = stage;\n      this.infectionTime = 0;\n    }\n\n    updateInfection(delta) {\n      const options = this.container.options;\n      const infection = options.infection;\n      const stages = options.infection.stages;\n      const stagesCount = stages.length;\n\n      if (this.infectionDelay !== undefined && this.infectionDelayStage !== undefined) {\n        const stage = this.infectionDelayStage;\n\n        if (stage > stagesCount || stage < 0) {\n          return;\n        }\n\n        if (this.infectionDelay > infection.delay * 1000) {\n          this.infectionStage = stage;\n          this.infectionTime = 0;\n          delete this.infectionDelay;\n          delete this.infectionDelayStage;\n        } else {\n          this.infectionDelay += delta;\n        }\n      } else {\n        delete this.infectionDelay;\n        delete this.infectionDelayStage;\n      }\n\n      if (this.infectionStage !== undefined && this.infectionTime !== undefined) {\n        const infectionStage = stages[this.infectionStage];\n\n        if (infectionStage.duration !== undefined && infectionStage.duration >= 0) {\n          if (this.infectionTime > infectionStage.duration * 1000) {\n            this.nextInfectionStage();\n          } else {\n            this.infectionTime += delta;\n          }\n        } else {\n          this.infectionTime += delta;\n        }\n      } else {\n        delete this.infectionStage;\n        delete this.infectionTime;\n      }\n    }\n\n    nextInfectionStage() {\n      const options = this.container.options;\n      const stagesCount = options.infection.stages.length;\n\n      if (stagesCount <= 0 || this.infectionStage === undefined) {\n        return;\n      }\n\n      this.infectionTime = 0;\n\n      if (stagesCount <= ++this.infectionStage) {\n        if (options.infection.cure) {\n          delete this.infectionStage;\n          delete this.infectionTime;\n          return;\n        } else {\n          this.infectionStage = 0;\n          this.infectionTime = 0;\n        }\n      }\n    }\n\n  }\n\n  exports.Infecter = Infecter;\n});","map":{"version":3,"sources":["/Users/beetee/Downloads/Bloc/todolist/node_modules/tsparticles/dist/Core/Particle/Infecter.js"],"names":["factory","module","exports","v","require","undefined","define","amd","Object","defineProperty","value","Infecter","constructor","container","startInfection","stage","options","stages","infection","stagesCount","length","infectionDelay","infectionDelayStage","updateInfectionStage","infectionStage","infectionTime","updateInfection","delta","delay","duration","nextInfectionStage","cure"],"mappings":"AAAA,CAAC,UAAUA,OAAV,EAAmB;AAChB,MAAI,OAAOC,MAAP,KAAkB,QAAlB,IAA8B,OAAOA,MAAM,CAACC,OAAd,KAA0B,QAA5D,EAAsE;AAClE,QAAIC,CAAC,GAAGH,OAAO,CAACI,OAAD,EAAUF,OAAV,CAAf;AACA,QAAIC,CAAC,KAAKE,SAAV,EAAqBJ,MAAM,CAACC,OAAP,GAAiBC,CAAjB;AACxB,GAHD,MAIK,IAAI,OAAOG,MAAP,KAAkB,UAAlB,IAAgCA,MAAM,CAACC,GAA3C,EAAgD;AACjDD,IAAAA,MAAM,CAAC,CAAC,SAAD,EAAY,SAAZ,CAAD,EAAyBN,OAAzB,CAAN;AACH;AACJ,CARD,EAQG,UAAUI,OAAV,EAAmBF,OAAnB,EAA4B;AAC3B;;AACAM,EAAAA,MAAM,CAACC,cAAP,CAAsBP,OAAtB,EAA+B,YAA/B,EAA6C;AAAEQ,IAAAA,KAAK,EAAE;AAAT,GAA7C;AACAR,EAAAA,OAAO,CAACS,QAAR,GAAmB,KAAK,CAAxB;;AACA,QAAMA,QAAN,CAAe;AACXC,IAAAA,WAAW,CAACC,SAAD,EAAY;AACnB,WAAKA,SAAL,GAAiBA,SAAjB;AACH;;AACDC,IAAAA,cAAc,CAACC,KAAD,EAAQ;AAClB,YAAMC,OAAO,GAAG,KAAKH,SAAL,CAAeG,OAA/B;AACA,YAAMC,MAAM,GAAGD,OAAO,CAACE,SAAR,CAAkBD,MAAjC;AACA,YAAME,WAAW,GAAGF,MAAM,CAACG,MAA3B;;AACA,UAAIL,KAAK,GAAGI,WAAR,IAAuBJ,KAAK,GAAG,CAAnC,EAAsC;AAClC;AACH;;AACD,WAAKM,cAAL,GAAsB,CAAtB;AACA,WAAKC,mBAAL,GAA2BP,KAA3B;AACH;;AACDQ,IAAAA,oBAAoB,CAACR,KAAD,EAAQ;AACxB,YAAMC,OAAO,GAAG,KAAKH,SAAL,CAAeG,OAA/B;AACA,YAAMG,WAAW,GAAGH,OAAO,CAACE,SAAR,CAAkBD,MAAlB,CAAyBG,MAA7C;;AACA,UAAIL,KAAK,GAAGI,WAAR,IAAuBJ,KAAK,GAAG,CAA/B,IAAqC,KAAKS,cAAL,KAAwBnB,SAAxB,IAAqC,KAAKmB,cAAL,GAAsBT,KAApG,EAA4G;AACxG;AACH;;AACD,WAAKS,cAAL,GAAsBT,KAAtB;AACA,WAAKU,aAAL,GAAqB,CAArB;AACH;;AACDC,IAAAA,eAAe,CAACC,KAAD,EAAQ;AACnB,YAAMX,OAAO,GAAG,KAAKH,SAAL,CAAeG,OAA/B;AACA,YAAME,SAAS,GAAGF,OAAO,CAACE,SAA1B;AACA,YAAMD,MAAM,GAAGD,OAAO,CAACE,SAAR,CAAkBD,MAAjC;AACA,YAAME,WAAW,GAAGF,MAAM,CAACG,MAA3B;;AACA,UAAI,KAAKC,cAAL,KAAwBhB,SAAxB,IAAqC,KAAKiB,mBAAL,KAA6BjB,SAAtE,EAAiF;AAC7E,cAAMU,KAAK,GAAG,KAAKO,mBAAnB;;AACA,YAAIP,KAAK,GAAGI,WAAR,IAAuBJ,KAAK,GAAG,CAAnC,EAAsC;AAClC;AACH;;AACD,YAAI,KAAKM,cAAL,GAAsBH,SAAS,CAACU,KAAV,GAAkB,IAA5C,EAAkD;AAC9C,eAAKJ,cAAL,GAAsBT,KAAtB;AACA,eAAKU,aAAL,GAAqB,CAArB;AACA,iBAAO,KAAKJ,cAAZ;AACA,iBAAO,KAAKC,mBAAZ;AACH,SALD,MAMK;AACD,eAAKD,cAAL,IAAuBM,KAAvB;AACH;AACJ,OAdD,MAeK;AACD,eAAO,KAAKN,cAAZ;AACA,eAAO,KAAKC,mBAAZ;AACH;;AACD,UAAI,KAAKE,cAAL,KAAwBnB,SAAxB,IAAqC,KAAKoB,aAAL,KAAuBpB,SAAhE,EAA2E;AACvE,cAAMmB,cAAc,GAAGP,MAAM,CAAC,KAAKO,cAAN,CAA7B;;AACA,YAAIA,cAAc,CAACK,QAAf,KAA4BxB,SAA5B,IAAyCmB,cAAc,CAACK,QAAf,IAA2B,CAAxE,EAA2E;AACvE,cAAI,KAAKJ,aAAL,GAAqBD,cAAc,CAACK,QAAf,GAA0B,IAAnD,EAAyD;AACrD,iBAAKC,kBAAL;AACH,WAFD,MAGK;AACD,iBAAKL,aAAL,IAAsBE,KAAtB;AACH;AACJ,SAPD,MAQK;AACD,eAAKF,aAAL,IAAsBE,KAAtB;AACH;AACJ,OAbD,MAcK;AACD,eAAO,KAAKH,cAAZ;AACA,eAAO,KAAKC,aAAZ;AACH;AACJ;;AACDK,IAAAA,kBAAkB,GAAG;AACjB,YAAMd,OAAO,GAAG,KAAKH,SAAL,CAAeG,OAA/B;AACA,YAAMG,WAAW,GAAGH,OAAO,CAACE,SAAR,CAAkBD,MAAlB,CAAyBG,MAA7C;;AACA,UAAID,WAAW,IAAI,CAAf,IAAoB,KAAKK,cAAL,KAAwBnB,SAAhD,EAA2D;AACvD;AACH;;AACD,WAAKoB,aAAL,GAAqB,CAArB;;AACA,UAAIN,WAAW,IAAI,EAAE,KAAKK,cAA1B,EAA0C;AACtC,YAAIR,OAAO,CAACE,SAAR,CAAkBa,IAAtB,EAA4B;AACxB,iBAAO,KAAKP,cAAZ;AACA,iBAAO,KAAKC,aAAZ;AACA;AACH,SAJD,MAKK;AACD,eAAKD,cAAL,GAAsB,CAAtB;AACA,eAAKC,aAAL,GAAqB,CAArB;AACH;AACJ;AACJ;;AApFU;;AAsFfvB,EAAAA,OAAO,CAACS,QAAR,GAAmBA,QAAnB;AACH,CAnGD","sourcesContent":["(function (factory) {\n    if (typeof module === \"object\" && typeof module.exports === \"object\") {\n        var v = factory(require, exports);\n        if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === \"function\" && define.amd) {\n        define([\"require\", \"exports\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.Infecter = void 0;\n    class Infecter {\n        constructor(container) {\n            this.container = container;\n        }\n        startInfection(stage) {\n            const options = this.container.options;\n            const stages = options.infection.stages;\n            const stagesCount = stages.length;\n            if (stage > stagesCount || stage < 0) {\n                return;\n            }\n            this.infectionDelay = 0;\n            this.infectionDelayStage = stage;\n        }\n        updateInfectionStage(stage) {\n            const options = this.container.options;\n            const stagesCount = options.infection.stages.length;\n            if (stage > stagesCount || stage < 0 || (this.infectionStage !== undefined && this.infectionStage > stage)) {\n                return;\n            }\n            this.infectionStage = stage;\n            this.infectionTime = 0;\n        }\n        updateInfection(delta) {\n            const options = this.container.options;\n            const infection = options.infection;\n            const stages = options.infection.stages;\n            const stagesCount = stages.length;\n            if (this.infectionDelay !== undefined && this.infectionDelayStage !== undefined) {\n                const stage = this.infectionDelayStage;\n                if (stage > stagesCount || stage < 0) {\n                    return;\n                }\n                if (this.infectionDelay > infection.delay * 1000) {\n                    this.infectionStage = stage;\n                    this.infectionTime = 0;\n                    delete this.infectionDelay;\n                    delete this.infectionDelayStage;\n                }\n                else {\n                    this.infectionDelay += delta;\n                }\n            }\n            else {\n                delete this.infectionDelay;\n                delete this.infectionDelayStage;\n            }\n            if (this.infectionStage !== undefined && this.infectionTime !== undefined) {\n                const infectionStage = stages[this.infectionStage];\n                if (infectionStage.duration !== undefined && infectionStage.duration >= 0) {\n                    if (this.infectionTime > infectionStage.duration * 1000) {\n                        this.nextInfectionStage();\n                    }\n                    else {\n                        this.infectionTime += delta;\n                    }\n                }\n                else {\n                    this.infectionTime += delta;\n                }\n            }\n            else {\n                delete this.infectionStage;\n                delete this.infectionTime;\n            }\n        }\n        nextInfectionStage() {\n            const options = this.container.options;\n            const stagesCount = options.infection.stages.length;\n            if (stagesCount <= 0 || this.infectionStage === undefined) {\n                return;\n            }\n            this.infectionTime = 0;\n            if (stagesCount <= ++this.infectionStage) {\n                if (options.infection.cure) {\n                    delete this.infectionStage;\n                    delete this.infectionTime;\n                    return;\n                }\n                else {\n                    this.infectionStage = 0;\n                    this.infectionTime = 0;\n                }\n            }\n        }\n    }\n    exports.Infecter = Infecter;\n});\n"]},"metadata":{},"sourceType":"script"}