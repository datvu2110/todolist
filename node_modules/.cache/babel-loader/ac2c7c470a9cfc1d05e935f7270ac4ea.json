{"ast":null,"code":"(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define([\"require\", \"exports\", \"../../Utils\", \"../../Enums\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.Mover = void 0;\n\n  const Utils_1 = require(\"../../Utils\");\n\n  const Enums_1 = require(\"../../Enums\");\n\n  class Mover {\n    constructor(container, particle) {\n      this.container = container;\n      this.particle = particle;\n    }\n\n    move(delta) {\n      const particle = this.particle;\n      particle.bubble.inRange = false;\n      particle.links = [];\n\n      for (const [, plugin] of this.container.plugins) {\n        if (particle.destroyed) {\n          break;\n        }\n\n        if (plugin.particleUpdate) {\n          plugin.particleUpdate(particle, delta);\n        }\n      }\n\n      if (particle.destroyed) {\n        return;\n      }\n\n      this.moveParticle(delta);\n      this.moveParallax();\n    }\n\n    moveParticle(delta) {\n      var _a, _b;\n\n      const particle = this.particle;\n      const particlesOptions = particle.particlesOptions;\n\n      if (!particlesOptions.move.enable) {\n        return;\n      }\n\n      const container = this.container;\n      const slowFactor = this.getProximitySpeedFactor();\n      const baseSpeed = ((_a = particle.moveSpeed) !== null && _a !== void 0 ? _a : container.retina.moveSpeed) * container.retina.reduceFactor;\n      const maxSize = (_b = particle.sizeValue) !== null && _b !== void 0 ? _b : container.retina.sizeValue;\n      const sizeFactor = particlesOptions.move.size ? particle.getRadius() / maxSize : 1;\n      const moveSpeed = baseSpeed / 2 * sizeFactor * slowFactor * delta.factor;\n      this.applyNoise(delta);\n      const gravityOptions = particlesOptions.move.gravity;\n\n      if (gravityOptions.enable) {\n        particle.velocity.vertical += gravityOptions.acceleration * delta.factor / (60 * moveSpeed);\n      }\n\n      const velocity = {\n        horizontal: particle.velocity.horizontal * moveSpeed,\n        vertical: particle.velocity.vertical * moveSpeed\n      };\n\n      if (gravityOptions.enable && velocity.vertical >= gravityOptions.maxSpeed && gravityOptions.maxSpeed > 0) {\n        velocity.vertical = gravityOptions.maxSpeed;\n        particle.velocity.vertical = velocity.vertical / moveSpeed;\n      }\n\n      particle.position.x += velocity.horizontal;\n      particle.position.y += velocity.vertical;\n\n      if (particlesOptions.move.vibrate) {\n        particle.position.x += Math.sin(particle.position.x * Math.cos(particle.position.y));\n        particle.position.y += Math.cos(particle.position.y * Math.sin(particle.position.x));\n      }\n\n      const initialPosition = particle.initialPosition;\n      const initialDistance = Utils_1.NumberUtils.getDistance(initialPosition, particle.position);\n\n      if (particle.maxDistance) {\n        if (initialDistance >= particle.maxDistance && !particle.misplaced) {\n          particle.misplaced = initialDistance > particle.maxDistance;\n          particle.velocity.horizontal = particle.velocity.vertical / 2 - particle.velocity.horizontal;\n          particle.velocity.vertical = particle.velocity.horizontal / 2 - particle.velocity.vertical;\n        } else if (initialDistance < particle.maxDistance && particle.misplaced) {\n          particle.misplaced = false;\n        } else if (particle.misplaced) {\n          if (particle.position.x < initialPosition.x && particle.velocity.horizontal < 0 || particle.position.x > initialPosition.x && particle.velocity.horizontal > 0) {\n            particle.velocity.horizontal *= -Math.random();\n          }\n\n          if (particle.position.y < initialPosition.y && particle.velocity.vertical < 0 || particle.position.y > initialPosition.y && particle.velocity.vertical > 0) {\n            particle.velocity.vertical *= -Math.random();\n          }\n        }\n      }\n    }\n\n    applyNoise(delta) {\n      const particle = this.particle;\n      const particlesOptions = particle.particlesOptions;\n      const noiseOptions = particlesOptions.move.noise;\n      const noiseEnabled = noiseOptions.enable;\n\n      if (!noiseEnabled) {\n        return;\n      }\n\n      const container = this.container;\n\n      if (particle.lastNoiseTime <= particle.noiseDelay) {\n        particle.lastNoiseTime += delta.value;\n        return;\n      }\n\n      const noise = container.noise.generate(particle);\n      particle.velocity.horizontal += Math.cos(noise.angle) * noise.length;\n      particle.velocity.horizontal = Utils_1.NumberUtils.clamp(particle.velocity.horizontal, -1, 1);\n      particle.velocity.vertical += Math.sin(noise.angle) * noise.length;\n      particle.velocity.vertical = Utils_1.NumberUtils.clamp(particle.velocity.vertical, -1, 1);\n      particle.lastNoiseTime -= particle.noiseDelay;\n    }\n\n    moveParallax() {\n      const container = this.container;\n      const options = container.options;\n\n      if (Utils_1.Utils.isSsr() || !options.interactivity.events.onHover.parallax.enable) {\n        return;\n      }\n\n      const particle = this.particle;\n      const parallaxForce = options.interactivity.events.onHover.parallax.force;\n      const mousePos = container.interactivity.mouse.position;\n\n      if (!mousePos) {\n        return;\n      }\n\n      const canvasCenter = {\n        x: container.canvas.size.width / 2,\n        y: container.canvas.size.height / 2\n      };\n      const parallaxSmooth = options.interactivity.events.onHover.parallax.smooth;\n      const factor = particle.getRadius() / parallaxForce;\n      const tmp = {\n        x: (mousePos.x - canvasCenter.x) * factor,\n        y: (mousePos.y - canvasCenter.y) * factor\n      };\n      particle.offset.x += (tmp.x - particle.offset.x) / parallaxSmooth;\n      particle.offset.y += (tmp.y - particle.offset.y) / parallaxSmooth;\n    }\n\n    getProximitySpeedFactor() {\n      const container = this.container;\n      const options = container.options;\n      const active = Utils_1.Utils.isInArray(Enums_1.HoverMode.slow, options.interactivity.events.onHover.mode);\n\n      if (!active) {\n        return 1;\n      }\n\n      const mousePos = this.container.interactivity.mouse.position;\n\n      if (!mousePos) {\n        return 1;\n      }\n\n      const particlePos = this.particle.getPosition();\n      const dist = Utils_1.NumberUtils.getDistance(mousePos, particlePos);\n      const radius = container.retina.slowModeRadius;\n\n      if (dist > radius) {\n        return 1;\n      }\n\n      const proximityFactor = dist / radius || 0;\n      const slowFactor = options.interactivity.modes.slow.factor;\n      return proximityFactor / slowFactor;\n    }\n\n  }\n\n  exports.Mover = Mover;\n});","map":{"version":3,"sources":["/Users/beetee/Downloads/Bloc/todolist/node_modules/tsparticles/dist/Core/Particle/Mover.js"],"names":["factory","module","exports","v","require","undefined","define","amd","Object","defineProperty","value","Mover","Utils_1","Enums_1","constructor","container","particle","move","delta","bubble","inRange","links","plugin","plugins","destroyed","particleUpdate","moveParticle","moveParallax","_a","_b","particlesOptions","enable","slowFactor","getProximitySpeedFactor","baseSpeed","moveSpeed","retina","reduceFactor","maxSize","sizeValue","sizeFactor","size","getRadius","factor","applyNoise","gravityOptions","gravity","velocity","vertical","acceleration","horizontal","maxSpeed","position","x","y","vibrate","Math","sin","cos","initialPosition","initialDistance","NumberUtils","getDistance","maxDistance","misplaced","random","noiseOptions","noise","noiseEnabled","lastNoiseTime","noiseDelay","generate","angle","length","clamp","options","Utils","isSsr","interactivity","events","onHover","parallax","parallaxForce","force","mousePos","mouse","canvasCenter","canvas","width","height","parallaxSmooth","smooth","tmp","offset","active","isInArray","HoverMode","slow","mode","particlePos","getPosition","dist","radius","slowModeRadius","proximityFactor","modes"],"mappings":"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","sourcesContent":["(function (factory) {\n    if (typeof module === \"object\" && typeof module.exports === \"object\") {\n        var v = factory(require, exports);\n        if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === \"function\" && define.amd) {\n        define([\"require\", \"exports\", \"../../Utils\", \"../../Enums\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.Mover = void 0;\n    const Utils_1 = require(\"../../Utils\");\n    const Enums_1 = require(\"../../Enums\");\n    class Mover {\n        constructor(container, particle) {\n            this.container = container;\n            this.particle = particle;\n        }\n        move(delta) {\n            const particle = this.particle;\n            particle.bubble.inRange = false;\n            particle.links = [];\n            for (const [, plugin] of this.container.plugins) {\n                if (particle.destroyed) {\n                    break;\n                }\n                if (plugin.particleUpdate) {\n                    plugin.particleUpdate(particle, delta);\n                }\n            }\n            if (particle.destroyed) {\n                return;\n            }\n            this.moveParticle(delta);\n            this.moveParallax();\n        }\n        moveParticle(delta) {\n            var _a, _b;\n            const particle = this.particle;\n            const particlesOptions = particle.particlesOptions;\n            if (!particlesOptions.move.enable) {\n                return;\n            }\n            const container = this.container;\n            const slowFactor = this.getProximitySpeedFactor();\n            const baseSpeed = ((_a = particle.moveSpeed) !== null && _a !== void 0 ? _a : container.retina.moveSpeed) * container.retina.reduceFactor;\n            const maxSize = (_b = particle.sizeValue) !== null && _b !== void 0 ? _b : container.retina.sizeValue;\n            const sizeFactor = particlesOptions.move.size ? particle.getRadius() / maxSize : 1;\n            const moveSpeed = (baseSpeed / 2) * sizeFactor * slowFactor * delta.factor;\n            this.applyNoise(delta);\n            const gravityOptions = particlesOptions.move.gravity;\n            if (gravityOptions.enable) {\n                particle.velocity.vertical += (gravityOptions.acceleration * delta.factor) / (60 * moveSpeed);\n            }\n            const velocity = {\n                horizontal: particle.velocity.horizontal * moveSpeed,\n                vertical: particle.velocity.vertical * moveSpeed,\n            };\n            if (gravityOptions.enable && velocity.vertical >= gravityOptions.maxSpeed && gravityOptions.maxSpeed > 0) {\n                velocity.vertical = gravityOptions.maxSpeed;\n                particle.velocity.vertical = velocity.vertical / moveSpeed;\n            }\n            particle.position.x += velocity.horizontal;\n            particle.position.y += velocity.vertical;\n            if (particlesOptions.move.vibrate) {\n                particle.position.x += Math.sin(particle.position.x * Math.cos(particle.position.y));\n                particle.position.y += Math.cos(particle.position.y * Math.sin(particle.position.x));\n            }\n            const initialPosition = particle.initialPosition;\n            const initialDistance = Utils_1.NumberUtils.getDistance(initialPosition, particle.position);\n            if (particle.maxDistance) {\n                if (initialDistance >= particle.maxDistance && !particle.misplaced) {\n                    particle.misplaced = initialDistance > particle.maxDistance;\n                    particle.velocity.horizontal = particle.velocity.vertical / 2 - particle.velocity.horizontal;\n                    particle.velocity.vertical = particle.velocity.horizontal / 2 - particle.velocity.vertical;\n                }\n                else if (initialDistance < particle.maxDistance && particle.misplaced) {\n                    particle.misplaced = false;\n                }\n                else if (particle.misplaced) {\n                    if ((particle.position.x < initialPosition.x && particle.velocity.horizontal < 0) ||\n                        (particle.position.x > initialPosition.x && particle.velocity.horizontal > 0)) {\n                        particle.velocity.horizontal *= -Math.random();\n                    }\n                    if ((particle.position.y < initialPosition.y && particle.velocity.vertical < 0) ||\n                        (particle.position.y > initialPosition.y && particle.velocity.vertical > 0)) {\n                        particle.velocity.vertical *= -Math.random();\n                    }\n                }\n            }\n        }\n        applyNoise(delta) {\n            const particle = this.particle;\n            const particlesOptions = particle.particlesOptions;\n            const noiseOptions = particlesOptions.move.noise;\n            const noiseEnabled = noiseOptions.enable;\n            if (!noiseEnabled) {\n                return;\n            }\n            const container = this.container;\n            if (particle.lastNoiseTime <= particle.noiseDelay) {\n                particle.lastNoiseTime += delta.value;\n                return;\n            }\n            const noise = container.noise.generate(particle);\n            particle.velocity.horizontal += Math.cos(noise.angle) * noise.length;\n            particle.velocity.horizontal = Utils_1.NumberUtils.clamp(particle.velocity.horizontal, -1, 1);\n            particle.velocity.vertical += Math.sin(noise.angle) * noise.length;\n            particle.velocity.vertical = Utils_1.NumberUtils.clamp(particle.velocity.vertical, -1, 1);\n            particle.lastNoiseTime -= particle.noiseDelay;\n        }\n        moveParallax() {\n            const container = this.container;\n            const options = container.options;\n            if (Utils_1.Utils.isSsr() || !options.interactivity.events.onHover.parallax.enable) {\n                return;\n            }\n            const particle = this.particle;\n            const parallaxForce = options.interactivity.events.onHover.parallax.force;\n            const mousePos = container.interactivity.mouse.position;\n            if (!mousePos) {\n                return;\n            }\n            const canvasCenter = {\n                x: container.canvas.size.width / 2,\n                y: container.canvas.size.height / 2,\n            };\n            const parallaxSmooth = options.interactivity.events.onHover.parallax.smooth;\n            const factor = particle.getRadius() / parallaxForce;\n            const tmp = {\n                x: (mousePos.x - canvasCenter.x) * factor,\n                y: (mousePos.y - canvasCenter.y) * factor,\n            };\n            particle.offset.x += (tmp.x - particle.offset.x) / parallaxSmooth;\n            particle.offset.y += (tmp.y - particle.offset.y) / parallaxSmooth;\n        }\n        getProximitySpeedFactor() {\n            const container = this.container;\n            const options = container.options;\n            const active = Utils_1.Utils.isInArray(Enums_1.HoverMode.slow, options.interactivity.events.onHover.mode);\n            if (!active) {\n                return 1;\n            }\n            const mousePos = this.container.interactivity.mouse.position;\n            if (!mousePos) {\n                return 1;\n            }\n            const particlePos = this.particle.getPosition();\n            const dist = Utils_1.NumberUtils.getDistance(mousePos, particlePos);\n            const radius = container.retina.slowModeRadius;\n            if (dist > radius) {\n                return 1;\n            }\n            const proximityFactor = dist / radius || 0;\n            const slowFactor = options.interactivity.modes.slow.factor;\n            return proximityFactor / slowFactor;\n        }\n    }\n    exports.Mover = Mover;\n});\n"]},"metadata":{},"sourceType":"script"}