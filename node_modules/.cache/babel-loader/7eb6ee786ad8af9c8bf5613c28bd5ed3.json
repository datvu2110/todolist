{"ast":null,"code":"(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define([\"require\", \"exports\", \"./Particle/Updater\", \"../Options/Classes/Particles/Particles\", \"../Options/Classes/Particles/Shape/Shape\", \"../Enums\", \"../Utils\", \"./Particle/Infecter\", \"./Particle/Mover\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.Particle = void 0;\n\n  const Updater_1 = require(\"./Particle/Updater\");\n\n  const Particles_1 = require(\"../Options/Classes/Particles/Particles\");\n\n  const Shape_1 = require(\"../Options/Classes/Particles/Shape/Shape\");\n\n  const Enums_1 = require(\"../Enums\");\n\n  const Utils_1 = require(\"../Utils\");\n\n  const Infecter_1 = require(\"./Particle/Infecter\");\n\n  const Mover_1 = require(\"./Particle/Mover\");\n\n  class Particle {\n    constructor(id, container, position, overrideOptions) {\n      var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n\n      this.id = id;\n      this.container = container;\n      this.links = [];\n      this.fill = true;\n      this.close = true;\n      this.lastNoiseTime = 0;\n      this.destroyed = false;\n      this.misplaced = false;\n      const pxRatio = container.retina.pixelRatio;\n      const options = container.options;\n      const particlesOptions = new Particles_1.Particles();\n      particlesOptions.load(options.particles);\n      const shapeType = particlesOptions.shape.type;\n      const reduceDuplicates = particlesOptions.reduceDuplicates;\n      this.shape = shapeType instanceof Array ? Utils_1.Utils.itemFromArray(shapeType, this.id, reduceDuplicates) : shapeType;\n\n      if (overrideOptions === null || overrideOptions === void 0 ? void 0 : overrideOptions.shape) {\n        if (overrideOptions.shape.type) {\n          const overrideShapeType = overrideOptions.shape.type;\n          this.shape = overrideShapeType instanceof Array ? Utils_1.Utils.itemFromArray(overrideShapeType, this.id, reduceDuplicates) : overrideShapeType;\n        }\n\n        const shapeOptions = new Shape_1.Shape();\n        shapeOptions.load(overrideOptions.shape);\n\n        if (this.shape) {\n          const shapeData = shapeOptions.options[this.shape];\n\n          if (shapeData) {\n            this.shapeData = Utils_1.Utils.deepExtend({}, shapeData instanceof Array ? Utils_1.Utils.itemFromArray(shapeData, this.id, reduceDuplicates) : shapeData);\n          }\n        }\n      } else {\n        const shapeData = particlesOptions.shape.options[this.shape];\n\n        if (shapeData) {\n          this.shapeData = Utils_1.Utils.deepExtend({}, shapeData instanceof Array ? Utils_1.Utils.itemFromArray(shapeData, this.id, reduceDuplicates) : shapeData);\n        }\n      }\n\n      if (overrideOptions !== undefined) {\n        particlesOptions.load(overrideOptions);\n      }\n\n      if (((_a = this.shapeData) === null || _a === void 0 ? void 0 : _a.particles) !== undefined) {\n        particlesOptions.load((_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.particles);\n      }\n\n      this.fill = (_d = (_c = this.shapeData) === null || _c === void 0 ? void 0 : _c.fill) !== null && _d !== void 0 ? _d : this.fill;\n      this.close = (_f = (_e = this.shapeData) === null || _e === void 0 ? void 0 : _e.close) !== null && _f !== void 0 ? _f : this.close;\n      this.particlesOptions = particlesOptions;\n      this.noiseDelay = Utils_1.NumberUtils.getValue(this.particlesOptions.move.noise.delay) * 1000;\n      container.retina.initParticle(this);\n      const color = this.particlesOptions.color;\n      const sizeOptions = this.particlesOptions.size;\n      const sizeValue = Utils_1.NumberUtils.getValue(sizeOptions) * container.retina.pixelRatio;\n      const randomSize = typeof sizeOptions.random === \"boolean\" ? sizeOptions.random : sizeOptions.random.enable;\n      this.size = {\n        value: sizeValue\n      };\n      this.direction = this.particlesOptions.move.direction;\n      this.bubble = {\n        inRange: false\n      };\n      this.initialVelocity = this.calculateVelocity();\n      this.velocity = {\n        horizontal: this.initialVelocity.horizontal,\n        vertical: this.initialVelocity.vertical\n      };\n      this.pathAngle = Math.atan2(this.initialVelocity.vertical, this.initialVelocity.horizontal);\n      const rotateOptions = this.particlesOptions.rotate;\n      this.rotate = {\n        value: (rotateOptions.random.enable ? Math.random() * 360 : rotateOptions.value) * Math.PI / 180\n      };\n      let rotateDirection = rotateOptions.direction;\n\n      if (rotateDirection === Enums_1.RotateDirection.random) {\n        const index = Math.floor(Math.random() * 2);\n        rotateDirection = index > 0 ? Enums_1.RotateDirection.counterClockwise : Enums_1.RotateDirection.clockwise;\n      }\n\n      switch (rotateDirection) {\n        case Enums_1.RotateDirection.counterClockwise:\n        case \"counterClockwise\":\n          this.rotate.status = Enums_1.AnimationStatus.decreasing;\n          break;\n\n        case Enums_1.RotateDirection.clockwise:\n          this.rotate.status = Enums_1.AnimationStatus.increasing;\n          break;\n      }\n\n      const rotateAnimation = this.particlesOptions.rotate.animation;\n\n      if (rotateAnimation.enable) {\n        this.rotate.velocity = rotateAnimation.speed / 360 * container.retina.reduceFactor;\n\n        if (!rotateAnimation.sync) {\n          this.rotate.velocity *= Math.random();\n        }\n      }\n\n      const sizeAnimation = this.particlesOptions.size.animation;\n\n      if (sizeAnimation.enable) {\n        this.size.status = Enums_1.AnimationStatus.increasing;\n\n        if (!randomSize) {\n          switch (sizeAnimation.startValue) {\n            case Enums_1.StartValueType.min:\n              this.size.value = sizeAnimation.minimumValue * pxRatio;\n              break;\n\n            case Enums_1.StartValueType.random:\n              this.size.value = Utils_1.NumberUtils.randomInRange(sizeAnimation.minimumValue * pxRatio, this.size.value);\n              break;\n\n            case Enums_1.StartValueType.max:\n            default:\n              this.size.status = Enums_1.AnimationStatus.decreasing;\n              break;\n          }\n        }\n\n        this.size.velocity = ((_g = this.sizeAnimationSpeed) !== null && _g !== void 0 ? _g : container.retina.sizeAnimationSpeed) / 100 * container.retina.reduceFactor;\n\n        if (!sizeAnimation.sync) {\n          this.size.velocity *= Math.random();\n        }\n      }\n\n      this.color = {\n        value: Utils_1.ColorUtils.colorToHsl(color, this.id, reduceDuplicates)\n      };\n      const colorAnimation = this.particlesOptions.color.animation;\n\n      if (colorAnimation.enable) {\n        this.color.velocity = colorAnimation.speed / 100 * container.retina.reduceFactor;\n\n        if (!colorAnimation.sync) {\n          this.color.velocity *= Math.random();\n        }\n      }\n\n      this.position = this.calcPosition(this.container, position);\n      this.initialPosition = {\n        x: this.position.x,\n        y: this.position.y\n      };\n      this.offset = {\n        x: 0,\n        y: 0\n      };\n      const opacityOptions = this.particlesOptions.opacity;\n      const randomOpacity = opacityOptions.random;\n      const opacityValue = opacityOptions.value;\n      this.opacity = {\n        value: randomOpacity.enable ? Utils_1.NumberUtils.randomInRange(randomOpacity.minimumValue, opacityValue) : opacityValue\n      };\n      const opacityAnimation = opacityOptions.animation;\n\n      if (opacityAnimation.enable) {\n        this.opacity.status = Enums_1.AnimationStatus.increasing;\n        this.opacity.velocity = opacityAnimation.speed / 100 * container.retina.reduceFactor;\n\n        if (!opacityAnimation.sync) {\n          this.opacity.velocity *= Math.random();\n        }\n      }\n\n      this.sides = 24;\n      let drawer = container.drawers.get(this.shape);\n\n      if (!drawer) {\n        drawer = Utils_1.Plugins.getShapeDrawer(this.shape);\n\n        if (drawer) {\n          container.drawers.set(this.shape, drawer);\n        }\n      }\n\n      const sideCountFunc = drawer === null || drawer === void 0 ? void 0 : drawer.getSidesCount;\n\n      if (sideCountFunc) {\n        this.sides = sideCountFunc(this);\n      }\n\n      const imageShape = this.loadImageShape(container, drawer);\n\n      if (imageShape) {\n        this.image = imageShape.image;\n        this.fill = imageShape.fill;\n        this.close = imageShape.close;\n      }\n\n      this.stroke = this.particlesOptions.stroke instanceof Array ? Utils_1.Utils.itemFromArray(this.particlesOptions.stroke, this.id, reduceDuplicates) : this.particlesOptions.stroke;\n      this.strokeWidth = this.stroke.width * container.retina.pixelRatio;\n      this.strokeColor = {\n        value: (_h = Utils_1.ColorUtils.colorToHsl(this.stroke.color)) !== null && _h !== void 0 ? _h : this.color.value\n      };\n\n      if (typeof this.stroke.color !== \"string\") {\n        const strokeColorAnimation = (_j = this.stroke.color) === null || _j === void 0 ? void 0 : _j.animation;\n\n        if (strokeColorAnimation && this.strokeColor) {\n          if (strokeColorAnimation.enable) {\n            this.strokeColor.velocity = strokeColorAnimation.speed / 100 * container.retina.reduceFactor;\n\n            if (!strokeColorAnimation.sync) {\n              this.strokeColor.velocity = this.strokeColor.velocity * Math.random();\n            }\n          } else {\n            this.strokeColor.velocity = 0;\n          }\n\n          if (strokeColorAnimation.enable && !strokeColorAnimation.sync && this.strokeColor.value) {\n            this.strokeColor.value.h = Math.random() * 360;\n          }\n        }\n      }\n\n      const lifeOptions = particlesOptions.life;\n      this.lifeDelay = container.retina.reduceFactor ? Utils_1.NumberUtils.getValue(lifeOptions.delay) * (lifeOptions.delay.sync ? 1 : Math.random()) / container.retina.reduceFactor * 1000 : 0;\n      this.lifeDelayTime = 0;\n      this.lifeDuration = container.retina.reduceFactor ? Utils_1.NumberUtils.getValue(lifeOptions.duration) * (lifeOptions.duration.sync ? 1 : Math.random()) / container.retina.reduceFactor * 1000 : 0;\n      this.lifeTime = 0;\n      this.livesRemaining = particlesOptions.life.count;\n      this.spawning = this.lifeDelay > 0;\n\n      if (this.lifeDuration <= 0) {\n        this.lifeDuration = -1;\n      }\n\n      if (this.livesRemaining <= 0) {\n        this.livesRemaining = -1;\n      }\n\n      this.shadowColor = Utils_1.ColorUtils.colorToRgb(this.particlesOptions.shadow.color);\n      this.updater = new Updater_1.Updater(container, this);\n      this.infecter = new Infecter_1.Infecter(container);\n      this.mover = new Mover_1.Mover(container, this);\n    }\n\n    move(delta) {\n      this.mover.move(delta);\n    }\n\n    update(delta) {\n      this.updater.update(delta);\n    }\n\n    draw(delta) {\n      this.container.canvas.drawParticle(this, delta);\n    }\n\n    getPosition() {\n      return {\n        x: this.position.x + this.offset.x,\n        y: this.position.y + this.offset.y\n      };\n    }\n\n    getRadius() {\n      return this.bubble.radius || this.size.value;\n    }\n\n    getFillColor() {\n      var _a;\n\n      return (_a = this.bubble.color) !== null && _a !== void 0 ? _a : this.color.value;\n    }\n\n    getStrokeColor() {\n      var _a, _b;\n\n      return (_b = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : this.strokeColor.value) !== null && _b !== void 0 ? _b : this.color.value;\n    }\n\n    destroy() {\n      this.destroyed = true;\n      this.bubble.inRange = false;\n      this.links = [];\n    }\n\n    calcPosition(container, position) {\n      var _a, _b;\n\n      for (const [, plugin] of container.plugins) {\n        const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n\n        if (pluginPos !== undefined) {\n          return Utils_1.Utils.deepExtend({}, pluginPos);\n        }\n      }\n\n      const pos = {\n        x: (_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * container.canvas.size.width,\n        y: (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * container.canvas.size.height\n      };\n      const outMode = this.particlesOptions.move.outMode;\n\n      if (Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounce) || Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounceHorizontal)) {\n        if (pos.x > container.canvas.size.width - this.size.value * 2) {\n          pos.x -= this.size.value;\n        } else if (pos.x < this.size.value * 2) {\n          pos.x += this.size.value;\n        }\n      }\n\n      if (Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounce) || Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounceVertical)) {\n        if (pos.y > container.canvas.size.height - this.size.value * 2) {\n          pos.y -= this.size.value;\n        } else if (pos.y < this.size.value * 2) {\n          pos.y += this.size.value;\n        }\n      }\n\n      return pos;\n    }\n\n    calculateVelocity() {\n      const baseVelocity = Utils_1.NumberUtils.getParticleBaseVelocity(this);\n      const res = {\n        horizontal: 0,\n        vertical: 0\n      };\n      const moveOptions = this.particlesOptions.move;\n      let rad;\n      let radOffset = Math.PI / 4;\n\n      if (typeof moveOptions.angle === \"number\") {\n        rad = Math.PI / 180 * moveOptions.angle;\n      } else {\n        rad = Math.PI / 180 * moveOptions.angle.value;\n        radOffset = Math.PI / 180 * moveOptions.angle.offset;\n      }\n\n      const range = {\n        left: Math.sin(radOffset + rad / 2) - Math.sin(radOffset - rad / 2),\n        right: Math.cos(radOffset + rad / 2) - Math.cos(radOffset - rad / 2)\n      };\n\n      if (moveOptions.straight) {\n        res.horizontal = baseVelocity.x;\n        res.vertical = baseVelocity.y;\n\n        if (moveOptions.random) {\n          res.horizontal += Utils_1.NumberUtils.randomInRange(range.left, range.right) / 2;\n          res.vertical += Utils_1.NumberUtils.randomInRange(range.left, range.right) / 2;\n        }\n      } else {\n        res.horizontal = baseVelocity.x + Utils_1.NumberUtils.randomInRange(range.left, range.right) / 2;\n        res.vertical = baseVelocity.y + Utils_1.NumberUtils.randomInRange(range.left, range.right) / 2;\n      }\n\n      return res;\n    }\n\n    loadImageShape(container, drawer) {\n      var _a, _b, _c, _d, _e;\n\n      if (!(this.shape === Enums_1.ShapeType.image || this.shape === Enums_1.ShapeType.images)) {\n        return;\n      }\n\n      const imageDrawer = drawer;\n      const images = imageDrawer.getImages(container).images;\n      const imageData = this.shapeData;\n      const image = (_a = images.find(t => t.source === imageData.src)) !== null && _a !== void 0 ? _a : images[0];\n      const color = this.getFillColor();\n      let imageRes;\n\n      if (!image) {\n        return;\n      }\n\n      if (image.svgData !== undefined && imageData.replaceColor && color) {\n        const svgColoredData = Utils_1.ColorUtils.replaceColorSvg(image, color, this.opacity.value);\n        const svg = new Blob([svgColoredData], {\n          type: \"image/svg+xml\"\n        });\n        const domUrl = URL || window.URL || window.webkitURL || window;\n        const url = domUrl.createObjectURL(svg);\n        const img = new Image();\n        imageRes = {\n          data: image,\n          loaded: false,\n          ratio: imageData.width / imageData.height,\n          replaceColor: (_b = imageData.replaceColor) !== null && _b !== void 0 ? _b : imageData.replace_color,\n          source: imageData.src\n        };\n        img.addEventListener(\"load\", () => {\n          if (this.image) {\n            this.image.loaded = true;\n            image.element = img;\n          }\n\n          domUrl.revokeObjectURL(url);\n        });\n        img.addEventListener(\"error\", () => {\n          domUrl.revokeObjectURL(url);\n          Utils_1.Utils.loadImage(imageData.src).then(img2 => {\n            if (this.image) {\n              image.element = img2.element;\n              this.image.loaded = true;\n            }\n          });\n        });\n        img.src = url;\n      } else {\n        imageRes = {\n          data: image,\n          loaded: true,\n          ratio: imageData.width / imageData.height,\n          replaceColor: (_c = imageData.replaceColor) !== null && _c !== void 0 ? _c : imageData.replace_color,\n          source: imageData.src\n        };\n      }\n\n      if (!imageRes.ratio) {\n        imageRes.ratio = 1;\n      }\n\n      const fill = (_d = imageData.fill) !== null && _d !== void 0 ? _d : this.fill;\n      const close = (_e = imageData.close) !== null && _e !== void 0 ? _e : this.close;\n      return {\n        image: imageRes,\n        fill,\n        close\n      };\n    }\n\n  }\n\n  exports.Particle = Particle;\n});","map":{"version":3,"sources":["/Users/beetee/Downloads/Bloc/todolist/node_modules/tsparticles/dist/Core/Particle.js"],"names":["factory","module","exports","v","require","undefined","define","amd","Object","defineProperty","value","Particle","Updater_1","Particles_1","Shape_1","Enums_1","Utils_1","Infecter_1","Mover_1","constructor","id","container","position","overrideOptions","_a","_b","_c","_d","_e","_f","_g","_h","_j","links","fill","close","lastNoiseTime","destroyed","misplaced","pxRatio","retina","pixelRatio","options","particlesOptions","Particles","load","particles","shapeType","shape","type","reduceDuplicates","Array","Utils","itemFromArray","overrideShapeType","shapeOptions","Shape","shapeData","deepExtend","noiseDelay","NumberUtils","getValue","move","noise","delay","initParticle","color","sizeOptions","size","sizeValue","randomSize","random","enable","direction","bubble","inRange","initialVelocity","calculateVelocity","velocity","horizontal","vertical","pathAngle","Math","atan2","rotateOptions","rotate","PI","rotateDirection","RotateDirection","index","floor","counterClockwise","clockwise","status","AnimationStatus","decreasing","increasing","rotateAnimation","animation","speed","reduceFactor","sync","sizeAnimation","startValue","StartValueType","min","minimumValue","randomInRange","max","sizeAnimationSpeed","ColorUtils","colorToHsl","colorAnimation","calcPosition","initialPosition","x","y","offset","opacityOptions","opacity","randomOpacity","opacityValue","opacityAnimation","sides","drawer","drawers","get","Plugins","getShapeDrawer","set","sideCountFunc","getSidesCount","imageShape","loadImageShape","image","stroke","strokeWidth","width","strokeColor","strokeColorAnimation","h","lifeOptions","life","lifeDelay","lifeDelayTime","lifeDuration","duration","lifeTime","livesRemaining","count","spawning","shadowColor","colorToRgb","shadow","updater","Updater","infecter","Infecter","mover","Mover","delta","update","draw","canvas","drawParticle","getPosition","getRadius","radius","getFillColor","getStrokeColor","destroy","plugin","plugins","pluginPos","particlePosition","pos","height","outMode","isInArray","OutMode","bounce","bounceHorizontal","bounceVertical","baseVelocity","getParticleBaseVelocity","res","moveOptions","rad","radOffset","angle","range","left","sin","right","cos","straight","ShapeType","images","imageDrawer","getImages","imageData","find","t","source","src","imageRes","svgData","replaceColor","svgColoredData","replaceColorSvg","svg","Blob","domUrl","URL","window","webkitURL","url","createObjectURL","img","Image","data","loaded","ratio","replace_color","addEventListener","element","revokeObjectURL","loadImage","then","img2"],"mappings":"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","sourcesContent":["(function (factory) {\n    if (typeof module === \"object\" && typeof module.exports === \"object\") {\n        var v = factory(require, exports);\n        if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === \"function\" && define.amd) {\n        define([\"require\", \"exports\", \"./Particle/Updater\", \"../Options/Classes/Particles/Particles\", \"../Options/Classes/Particles/Shape/Shape\", \"../Enums\", \"../Utils\", \"./Particle/Infecter\", \"./Particle/Mover\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.Particle = void 0;\n    const Updater_1 = require(\"./Particle/Updater\");\n    const Particles_1 = require(\"../Options/Classes/Particles/Particles\");\n    const Shape_1 = require(\"../Options/Classes/Particles/Shape/Shape\");\n    const Enums_1 = require(\"../Enums\");\n    const Utils_1 = require(\"../Utils\");\n    const Infecter_1 = require(\"./Particle/Infecter\");\n    const Mover_1 = require(\"./Particle/Mover\");\n    class Particle {\n        constructor(id, container, position, overrideOptions) {\n            var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n            this.id = id;\n            this.container = container;\n            this.links = [];\n            this.fill = true;\n            this.close = true;\n            this.lastNoiseTime = 0;\n            this.destroyed = false;\n            this.misplaced = false;\n            const pxRatio = container.retina.pixelRatio;\n            const options = container.options;\n            const particlesOptions = new Particles_1.Particles();\n            particlesOptions.load(options.particles);\n            const shapeType = particlesOptions.shape.type;\n            const reduceDuplicates = particlesOptions.reduceDuplicates;\n            this.shape = shapeType instanceof Array ? Utils_1.Utils.itemFromArray(shapeType, this.id, reduceDuplicates) : shapeType;\n            if (overrideOptions === null || overrideOptions === void 0 ? void 0 : overrideOptions.shape) {\n                if (overrideOptions.shape.type) {\n                    const overrideShapeType = overrideOptions.shape.type;\n                    this.shape =\n                        overrideShapeType instanceof Array\n                            ? Utils_1.Utils.itemFromArray(overrideShapeType, this.id, reduceDuplicates)\n                            : overrideShapeType;\n                }\n                const shapeOptions = new Shape_1.Shape();\n                shapeOptions.load(overrideOptions.shape);\n                if (this.shape) {\n                    const shapeData = shapeOptions.options[this.shape];\n                    if (shapeData) {\n                        this.shapeData = Utils_1.Utils.deepExtend({}, shapeData instanceof Array\n                            ? Utils_1.Utils.itemFromArray(shapeData, this.id, reduceDuplicates)\n                            : shapeData);\n                    }\n                }\n            }\n            else {\n                const shapeData = particlesOptions.shape.options[this.shape];\n                if (shapeData) {\n                    this.shapeData = Utils_1.Utils.deepExtend({}, shapeData instanceof Array ? Utils_1.Utils.itemFromArray(shapeData, this.id, reduceDuplicates) : shapeData);\n                }\n            }\n            if (overrideOptions !== undefined) {\n                particlesOptions.load(overrideOptions);\n            }\n            if (((_a = this.shapeData) === null || _a === void 0 ? void 0 : _a.particles) !== undefined) {\n                particlesOptions.load((_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.particles);\n            }\n            this.fill = (_d = (_c = this.shapeData) === null || _c === void 0 ? void 0 : _c.fill) !== null && _d !== void 0 ? _d : this.fill;\n            this.close = (_f = (_e = this.shapeData) === null || _e === void 0 ? void 0 : _e.close) !== null && _f !== void 0 ? _f : this.close;\n            this.particlesOptions = particlesOptions;\n            this.noiseDelay = Utils_1.NumberUtils.getValue(this.particlesOptions.move.noise.delay) * 1000;\n            container.retina.initParticle(this);\n            const color = this.particlesOptions.color;\n            const sizeOptions = this.particlesOptions.size;\n            const sizeValue = Utils_1.NumberUtils.getValue(sizeOptions) * container.retina.pixelRatio;\n            const randomSize = typeof sizeOptions.random === \"boolean\" ? sizeOptions.random : sizeOptions.random.enable;\n            this.size = {\n                value: sizeValue,\n            };\n            this.direction = this.particlesOptions.move.direction;\n            this.bubble = {\n                inRange: false,\n            };\n            this.initialVelocity = this.calculateVelocity();\n            this.velocity = {\n                horizontal: this.initialVelocity.horizontal,\n                vertical: this.initialVelocity.vertical,\n            };\n            this.pathAngle = Math.atan2(this.initialVelocity.vertical, this.initialVelocity.horizontal);\n            const rotateOptions = this.particlesOptions.rotate;\n            this.rotate = {\n                value: ((rotateOptions.random.enable ? Math.random() * 360 : rotateOptions.value) * Math.PI) / 180,\n            };\n            let rotateDirection = rotateOptions.direction;\n            if (rotateDirection === Enums_1.RotateDirection.random) {\n                const index = Math.floor(Math.random() * 2);\n                rotateDirection = index > 0 ? Enums_1.RotateDirection.counterClockwise : Enums_1.RotateDirection.clockwise;\n            }\n            switch (rotateDirection) {\n                case Enums_1.RotateDirection.counterClockwise:\n                case \"counterClockwise\":\n                    this.rotate.status = Enums_1.AnimationStatus.decreasing;\n                    break;\n                case Enums_1.RotateDirection.clockwise:\n                    this.rotate.status = Enums_1.AnimationStatus.increasing;\n                    break;\n            }\n            const rotateAnimation = this.particlesOptions.rotate.animation;\n            if (rotateAnimation.enable) {\n                this.rotate.velocity = (rotateAnimation.speed / 360) * container.retina.reduceFactor;\n                if (!rotateAnimation.sync) {\n                    this.rotate.velocity *= Math.random();\n                }\n            }\n            const sizeAnimation = this.particlesOptions.size.animation;\n            if (sizeAnimation.enable) {\n                this.size.status = Enums_1.AnimationStatus.increasing;\n                if (!randomSize) {\n                    switch (sizeAnimation.startValue) {\n                        case Enums_1.StartValueType.min:\n                            this.size.value = sizeAnimation.minimumValue * pxRatio;\n                            break;\n                        case Enums_1.StartValueType.random:\n                            this.size.value = Utils_1.NumberUtils.randomInRange(sizeAnimation.minimumValue * pxRatio, this.size.value);\n                            break;\n                        case Enums_1.StartValueType.max:\n                        default:\n                            this.size.status = Enums_1.AnimationStatus.decreasing;\n                            break;\n                    }\n                }\n                this.size.velocity =\n                    (((_g = this.sizeAnimationSpeed) !== null && _g !== void 0 ? _g : container.retina.sizeAnimationSpeed) / 100) *\n                        container.retina.reduceFactor;\n                if (!sizeAnimation.sync) {\n                    this.size.velocity *= Math.random();\n                }\n            }\n            this.color = {\n                value: Utils_1.ColorUtils.colorToHsl(color, this.id, reduceDuplicates),\n            };\n            const colorAnimation = this.particlesOptions.color.animation;\n            if (colorAnimation.enable) {\n                this.color.velocity = (colorAnimation.speed / 100) * container.retina.reduceFactor;\n                if (!colorAnimation.sync) {\n                    this.color.velocity *= Math.random();\n                }\n            }\n            this.position = this.calcPosition(this.container, position);\n            this.initialPosition = {\n                x: this.position.x,\n                y: this.position.y,\n            };\n            this.offset = {\n                x: 0,\n                y: 0,\n            };\n            const opacityOptions = this.particlesOptions.opacity;\n            const randomOpacity = opacityOptions.random;\n            const opacityValue = opacityOptions.value;\n            this.opacity = {\n                value: randomOpacity.enable\n                    ? Utils_1.NumberUtils.randomInRange(randomOpacity.minimumValue, opacityValue)\n                    : opacityValue,\n            };\n            const opacityAnimation = opacityOptions.animation;\n            if (opacityAnimation.enable) {\n                this.opacity.status = Enums_1.AnimationStatus.increasing;\n                this.opacity.velocity = (opacityAnimation.speed / 100) * container.retina.reduceFactor;\n                if (!opacityAnimation.sync) {\n                    this.opacity.velocity *= Math.random();\n                }\n            }\n            this.sides = 24;\n            let drawer = container.drawers.get(this.shape);\n            if (!drawer) {\n                drawer = Utils_1.Plugins.getShapeDrawer(this.shape);\n                if (drawer) {\n                    container.drawers.set(this.shape, drawer);\n                }\n            }\n            const sideCountFunc = drawer === null || drawer === void 0 ? void 0 : drawer.getSidesCount;\n            if (sideCountFunc) {\n                this.sides = sideCountFunc(this);\n            }\n            const imageShape = this.loadImageShape(container, drawer);\n            if (imageShape) {\n                this.image = imageShape.image;\n                this.fill = imageShape.fill;\n                this.close = imageShape.close;\n            }\n            this.stroke =\n                this.particlesOptions.stroke instanceof Array\n                    ? Utils_1.Utils.itemFromArray(this.particlesOptions.stroke, this.id, reduceDuplicates)\n                    : this.particlesOptions.stroke;\n            this.strokeWidth = this.stroke.width * container.retina.pixelRatio;\n            this.strokeColor = {\n                value: (_h = Utils_1.ColorUtils.colorToHsl(this.stroke.color)) !== null && _h !== void 0 ? _h : this.color.value,\n            };\n            if (typeof this.stroke.color !== \"string\") {\n                const strokeColorAnimation = (_j = this.stroke.color) === null || _j === void 0 ? void 0 : _j.animation;\n                if (strokeColorAnimation && this.strokeColor) {\n                    if (strokeColorAnimation.enable) {\n                        this.strokeColor.velocity = (strokeColorAnimation.speed / 100) * container.retina.reduceFactor;\n                        if (!strokeColorAnimation.sync) {\n                            this.strokeColor.velocity = this.strokeColor.velocity * Math.random();\n                        }\n                    }\n                    else {\n                        this.strokeColor.velocity = 0;\n                    }\n                    if (strokeColorAnimation.enable && !strokeColorAnimation.sync && this.strokeColor.value) {\n                        this.strokeColor.value.h = Math.random() * 360;\n                    }\n                }\n            }\n            const lifeOptions = particlesOptions.life;\n            this.lifeDelay = container.retina.reduceFactor\n                ? ((Utils_1.NumberUtils.getValue(lifeOptions.delay) * (lifeOptions.delay.sync ? 1 : Math.random())) /\n                    container.retina.reduceFactor) *\n                    1000\n                : 0;\n            this.lifeDelayTime = 0;\n            this.lifeDuration = container.retina.reduceFactor\n                ? ((Utils_1.NumberUtils.getValue(lifeOptions.duration) * (lifeOptions.duration.sync ? 1 : Math.random())) /\n                    container.retina.reduceFactor) *\n                    1000\n                : 0;\n            this.lifeTime = 0;\n            this.livesRemaining = particlesOptions.life.count;\n            this.spawning = this.lifeDelay > 0;\n            if (this.lifeDuration <= 0) {\n                this.lifeDuration = -1;\n            }\n            if (this.livesRemaining <= 0) {\n                this.livesRemaining = -1;\n            }\n            this.shadowColor = Utils_1.ColorUtils.colorToRgb(this.particlesOptions.shadow.color);\n            this.updater = new Updater_1.Updater(container, this);\n            this.infecter = new Infecter_1.Infecter(container);\n            this.mover = new Mover_1.Mover(container, this);\n        }\n        move(delta) {\n            this.mover.move(delta);\n        }\n        update(delta) {\n            this.updater.update(delta);\n        }\n        draw(delta) {\n            this.container.canvas.drawParticle(this, delta);\n        }\n        getPosition() {\n            return {\n                x: this.position.x + this.offset.x,\n                y: this.position.y + this.offset.y,\n            };\n        }\n        getRadius() {\n            return this.bubble.radius || this.size.value;\n        }\n        getFillColor() {\n            var _a;\n            return (_a = this.bubble.color) !== null && _a !== void 0 ? _a : this.color.value;\n        }\n        getStrokeColor() {\n            var _a, _b;\n            return (_b = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : this.strokeColor.value) !== null && _b !== void 0 ? _b : this.color.value;\n        }\n        destroy() {\n            this.destroyed = true;\n            this.bubble.inRange = false;\n            this.links = [];\n        }\n        calcPosition(container, position) {\n            var _a, _b;\n            for (const [, plugin] of container.plugins) {\n                const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n                if (pluginPos !== undefined) {\n                    return Utils_1.Utils.deepExtend({}, pluginPos);\n                }\n            }\n            const pos = {\n                x: (_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * container.canvas.size.width,\n                y: (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * container.canvas.size.height,\n            };\n            const outMode = this.particlesOptions.move.outMode;\n            if (Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounce) || Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounceHorizontal)) {\n                if (pos.x > container.canvas.size.width - this.size.value * 2) {\n                    pos.x -= this.size.value;\n                }\n                else if (pos.x < this.size.value * 2) {\n                    pos.x += this.size.value;\n                }\n            }\n            if (Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounce) || Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounceVertical)) {\n                if (pos.y > container.canvas.size.height - this.size.value * 2) {\n                    pos.y -= this.size.value;\n                }\n                else if (pos.y < this.size.value * 2) {\n                    pos.y += this.size.value;\n                }\n            }\n            return pos;\n        }\n        calculateVelocity() {\n            const baseVelocity = Utils_1.NumberUtils.getParticleBaseVelocity(this);\n            const res = {\n                horizontal: 0,\n                vertical: 0,\n            };\n            const moveOptions = this.particlesOptions.move;\n            let rad;\n            let radOffset = Math.PI / 4;\n            if (typeof moveOptions.angle === \"number\") {\n                rad = (Math.PI / 180) * moveOptions.angle;\n            }\n            else {\n                rad = (Math.PI / 180) * moveOptions.angle.value;\n                radOffset = (Math.PI / 180) * moveOptions.angle.offset;\n            }\n            const range = {\n                left: Math.sin(radOffset + rad / 2) - Math.sin(radOffset - rad / 2),\n                right: Math.cos(radOffset + rad / 2) - Math.cos(radOffset - rad / 2),\n            };\n            if (moveOptions.straight) {\n                res.horizontal = baseVelocity.x;\n                res.vertical = baseVelocity.y;\n                if (moveOptions.random) {\n                    res.horizontal += Utils_1.NumberUtils.randomInRange(range.left, range.right) / 2;\n                    res.vertical += Utils_1.NumberUtils.randomInRange(range.left, range.right) / 2;\n                }\n            }\n            else {\n                res.horizontal = baseVelocity.x + Utils_1.NumberUtils.randomInRange(range.left, range.right) / 2;\n                res.vertical = baseVelocity.y + Utils_1.NumberUtils.randomInRange(range.left, range.right) / 2;\n            }\n            return res;\n        }\n        loadImageShape(container, drawer) {\n            var _a, _b, _c, _d, _e;\n            if (!(this.shape === Enums_1.ShapeType.image || this.shape === Enums_1.ShapeType.images)) {\n                return;\n            }\n            const imageDrawer = drawer;\n            const images = imageDrawer.getImages(container).images;\n            const imageData = this.shapeData;\n            const image = (_a = images.find((t) => t.source === imageData.src)) !== null && _a !== void 0 ? _a : images[0];\n            const color = this.getFillColor();\n            let imageRes;\n            if (!image) {\n                return;\n            }\n            if (image.svgData !== undefined && imageData.replaceColor && color) {\n                const svgColoredData = Utils_1.ColorUtils.replaceColorSvg(image, color, this.opacity.value);\n                const svg = new Blob([svgColoredData], { type: \"image/svg+xml\" });\n                const domUrl = URL || window.URL || window.webkitURL || window;\n                const url = domUrl.createObjectURL(svg);\n                const img = new Image();\n                imageRes = {\n                    data: image,\n                    loaded: false,\n                    ratio: imageData.width / imageData.height,\n                    replaceColor: (_b = imageData.replaceColor) !== null && _b !== void 0 ? _b : imageData.replace_color,\n                    source: imageData.src,\n                };\n                img.addEventListener(\"load\", () => {\n                    if (this.image) {\n                        this.image.loaded = true;\n                        image.element = img;\n                    }\n                    domUrl.revokeObjectURL(url);\n                });\n                img.addEventListener(\"error\", () => {\n                    domUrl.revokeObjectURL(url);\n                    Utils_1.Utils.loadImage(imageData.src).then((img2) => {\n                        if (this.image) {\n                            image.element = img2.element;\n                            this.image.loaded = true;\n                        }\n                    });\n                });\n                img.src = url;\n            }\n            else {\n                imageRes = {\n                    data: image,\n                    loaded: true,\n                    ratio: imageData.width / imageData.height,\n                    replaceColor: (_c = imageData.replaceColor) !== null && _c !== void 0 ? _c : imageData.replace_color,\n                    source: imageData.src,\n                };\n            }\n            if (!imageRes.ratio) {\n                imageRes.ratio = 1;\n            }\n            const fill = (_d = imageData.fill) !== null && _d !== void 0 ? _d : this.fill;\n            const close = (_e = imageData.close) !== null && _e !== void 0 ? _e : this.close;\n            return {\n                image: imageRes,\n                fill,\n                close,\n            };\n        }\n    }\n    exports.Particle = Particle;\n});\n"]},"metadata":{},"sourceType":"script"}