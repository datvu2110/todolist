{"ast":null,"code":"(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define([\"require\", \"exports\", \"./Particle\", \"../Utils\", \"./Particle/InteractionManager\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.Particles = void 0;\n\n  const Particle_1 = require(\"./Particle\");\n\n  const Utils_1 = require(\"../Utils\");\n\n  const InteractionManager_1 = require(\"./Particle/InteractionManager\");\n\n  class Particles {\n    constructor(container) {\n      this.container = container;\n      this.nextId = 0;\n      this.array = [];\n      this.linksFreq = new Map();\n      this.trianglesFreq = new Map();\n      this.interactionManager = new InteractionManager_1.InteractionManager(container);\n      const canvasSize = this.container.canvas.size;\n      this.linksColors = new Map();\n      this.quadTree = new Utils_1.QuadTree(new Utils_1.Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, canvasSize.width * 3 / 2, canvasSize.height * 3 / 2), 4);\n    }\n\n    get count() {\n      return this.array.length;\n    }\n\n    init() {\n      const container = this.container;\n      const options = container.options;\n      this.linksFreq = new Map();\n      this.trianglesFreq = new Map();\n      let handled = false;\n\n      for (const particle of options.manualParticles) {\n        const pos = particle.position ? {\n          x: particle.position.x * container.canvas.size.width / 100,\n          y: particle.position.y * container.canvas.size.height / 100\n        } : undefined;\n        this.addParticle(pos, particle.options);\n      }\n\n      for (const [, plugin] of container.plugins) {\n        if (plugin.particlesInitialization !== undefined) {\n          handled = plugin.particlesInitialization();\n        }\n\n        if (handled) {\n          break;\n        }\n      }\n\n      if (!handled) {\n        for (let i = this.count; i < options.particles.number.value; i++) {\n          this.addParticle();\n        }\n      }\n\n      if (options.infection.enable) {\n        for (let i = 0; i < options.infection.infections; i++) {\n          const notInfected = this.array.filter(p => p.infecter.infectionStage === undefined);\n          const infected = Utils_1.Utils.itemFromArray(notInfected);\n          infected.infecter.startInfection(0);\n        }\n      }\n\n      this.interactionManager.init();\n      container.noise.init();\n    }\n\n    redraw() {\n      this.clear();\n      this.init();\n      this.draw({\n        value: 0,\n        factor: 0\n      });\n    }\n\n    removeAt(index, quantity) {\n      if (index >= 0 && index <= this.count) {\n        for (const particle of this.array.splice(index, quantity !== null && quantity !== void 0 ? quantity : 1)) {\n          particle.destroy();\n        }\n      }\n    }\n\n    remove(particle) {\n      this.removeAt(this.array.indexOf(particle));\n    }\n\n    update(delta) {\n      const container = this.container;\n      const particlesToDelete = [];\n      container.noise.update();\n\n      for (const particle of this.array) {\n        particle.move(delta);\n\n        if (particle.destroyed) {\n          particlesToDelete.push(particle);\n          continue;\n        }\n\n        this.quadTree.insert(new Utils_1.Point(particle.getPosition(), particle));\n      }\n\n      for (const particle of particlesToDelete) {\n        this.remove(particle);\n      }\n\n      this.interactionManager.externalInteract(delta);\n\n      for (const particle of this.container.particles.array) {\n        particle.update(delta);\n\n        if (!particle.destroyed && !particle.spawning) {\n          this.interactionManager.particlesInteract(particle, delta);\n        }\n      }\n    }\n\n    draw(delta) {\n      const container = this.container;\n      container.canvas.clear();\n      const canvasSize = this.container.canvas.size;\n      this.quadTree = new Utils_1.QuadTree(new Utils_1.Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, canvasSize.width * 3 / 2, canvasSize.height * 3 / 2), 4);\n      this.update(delta);\n\n      for (const [, plugin] of container.plugins) {\n        container.canvas.drawPlugin(plugin, delta);\n      }\n\n      for (const p of this.array) {\n        p.draw(delta);\n      }\n    }\n\n    clear() {\n      this.array = [];\n    }\n\n    push(nb, mouse, overrideOptions) {\n      const container = this.container;\n      const options = container.options;\n      const limit = options.particles.number.limit * container.density;\n      this.pushing = true;\n\n      if (limit > 0) {\n        const countToRemove = this.count + nb - limit;\n\n        if (countToRemove > 0) {\n          this.removeQuantity(countToRemove);\n        }\n      }\n\n      for (let i = 0; i < nb; i++) {\n        this.addParticle(mouse === null || mouse === void 0 ? void 0 : mouse.position, overrideOptions);\n      }\n\n      if (!options.particles.move.enable) {\n        this.container.play();\n      }\n\n      this.pushing = false;\n    }\n\n    addParticle(position, overrideOptions) {\n      try {\n        const particle = new Particle_1.Particle(this.nextId, this.container, position, overrideOptions);\n        this.array.push(particle);\n        this.nextId++;\n        return particle;\n      } catch (_a) {\n        console.warn(\"error adding particle\");\n        return;\n      }\n    }\n\n    removeQuantity(quantity) {\n      const options = this.container.options;\n      this.removeAt(0, quantity);\n\n      if (!options.particles.move.enable) {\n        this.container.play();\n      }\n    }\n\n    getLinkFrequency(p1, p2) {\n      const key = `${Math.min(p1.id, p2.id)}_${Math.max(p1.id, p2.id)}`;\n      let res = this.linksFreq.get(key);\n\n      if (res === undefined) {\n        res = Math.random();\n        this.linksFreq.set(key, res);\n      }\n\n      return res;\n    }\n\n    getTriangleFrequency(p1, p2, p3) {\n      let [id1, id2, id3] = [p1.id, p2.id, p3.id];\n\n      if (id1 > id2) {\n        [id2, id1] = [id1, id2];\n      }\n\n      if (id2 > id3) {\n        [id3, id2] = [id2, id3];\n      }\n\n      if (id1 > id3) {\n        [id3, id1] = [id1, id3];\n      }\n\n      const key = `${id1}_${id2}_${id3}`;\n      let res = this.trianglesFreq.get(key);\n\n      if (res === undefined) {\n        res = Math.random();\n        this.trianglesFreq.set(key, res);\n      }\n\n      return res;\n    }\n\n  }\n\n  exports.Particles = Particles;\n});","map":{"version":3,"sources":["/Users/beetee/Downloads/Bloc/todolist/node_modules/tsparticles/dist/Core/Particles.js"],"names":["factory","module","exports","v","require","undefined","define","amd","Object","defineProperty","value","Particles","Particle_1","Utils_1","InteractionManager_1","constructor","container","nextId","array","linksFreq","Map","trianglesFreq","interactionManager","InteractionManager","canvasSize","canvas","size","linksColors","quadTree","QuadTree","Rectangle","width","height","count","length","init","options","handled","particle","manualParticles","pos","position","x","y","addParticle","plugin","plugins","particlesInitialization","i","particles","number","infection","enable","infections","notInfected","filter","p","infecter","infectionStage","infected","Utils","itemFromArray","startInfection","noise","redraw","clear","draw","factor","removeAt","index","quantity","splice","destroy","remove","indexOf","update","delta","particlesToDelete","move","destroyed","push","insert","Point","getPosition","externalInteract","spawning","particlesInteract","drawPlugin","nb","mouse","overrideOptions","limit","density","pushing","countToRemove","removeQuantity","play","Particle","_a","console","warn","getLinkFrequency","p1","p2","key","Math","min","id","max","res","get","random","set","getTriangleFrequency","p3","id1","id2","id3"],"mappings":"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","sourcesContent":["(function (factory) {\n    if (typeof module === \"object\" && typeof module.exports === \"object\") {\n        var v = factory(require, exports);\n        if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === \"function\" && define.amd) {\n        define([\"require\", \"exports\", \"./Particle\", \"../Utils\", \"./Particle/InteractionManager\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.Particles = void 0;\n    const Particle_1 = require(\"./Particle\");\n    const Utils_1 = require(\"../Utils\");\n    const InteractionManager_1 = require(\"./Particle/InteractionManager\");\n    class Particles {\n        constructor(container) {\n            this.container = container;\n            this.nextId = 0;\n            this.array = [];\n            this.linksFreq = new Map();\n            this.trianglesFreq = new Map();\n            this.interactionManager = new InteractionManager_1.InteractionManager(container);\n            const canvasSize = this.container.canvas.size;\n            this.linksColors = new Map();\n            this.quadTree = new Utils_1.QuadTree(new Utils_1.Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, (canvasSize.width * 3) / 2, (canvasSize.height * 3) / 2), 4);\n        }\n        get count() {\n            return this.array.length;\n        }\n        init() {\n            const container = this.container;\n            const options = container.options;\n            this.linksFreq = new Map();\n            this.trianglesFreq = new Map();\n            let handled = false;\n            for (const particle of options.manualParticles) {\n                const pos = particle.position\n                    ? {\n                        x: (particle.position.x * container.canvas.size.width) / 100,\n                        y: (particle.position.y * container.canvas.size.height) / 100,\n                    }\n                    : undefined;\n                this.addParticle(pos, particle.options);\n            }\n            for (const [, plugin] of container.plugins) {\n                if (plugin.particlesInitialization !== undefined) {\n                    handled = plugin.particlesInitialization();\n                }\n                if (handled) {\n                    break;\n                }\n            }\n            if (!handled) {\n                for (let i = this.count; i < options.particles.number.value; i++) {\n                    this.addParticle();\n                }\n            }\n            if (options.infection.enable) {\n                for (let i = 0; i < options.infection.infections; i++) {\n                    const notInfected = this.array.filter((p) => p.infecter.infectionStage === undefined);\n                    const infected = Utils_1.Utils.itemFromArray(notInfected);\n                    infected.infecter.startInfection(0);\n                }\n            }\n            this.interactionManager.init();\n            container.noise.init();\n        }\n        redraw() {\n            this.clear();\n            this.init();\n            this.draw({ value: 0, factor: 0 });\n        }\n        removeAt(index, quantity) {\n            if (index >= 0 && index <= this.count) {\n                for (const particle of this.array.splice(index, quantity !== null && quantity !== void 0 ? quantity : 1)) {\n                    particle.destroy();\n                }\n            }\n        }\n        remove(particle) {\n            this.removeAt(this.array.indexOf(particle));\n        }\n        update(delta) {\n            const container = this.container;\n            const particlesToDelete = [];\n            container.noise.update();\n            for (const particle of this.array) {\n                particle.move(delta);\n                if (particle.destroyed) {\n                    particlesToDelete.push(particle);\n                    continue;\n                }\n                this.quadTree.insert(new Utils_1.Point(particle.getPosition(), particle));\n            }\n            for (const particle of particlesToDelete) {\n                this.remove(particle);\n            }\n            this.interactionManager.externalInteract(delta);\n            for (const particle of this.container.particles.array) {\n                particle.update(delta);\n                if (!particle.destroyed && !particle.spawning) {\n                    this.interactionManager.particlesInteract(particle, delta);\n                }\n            }\n        }\n        draw(delta) {\n            const container = this.container;\n            container.canvas.clear();\n            const canvasSize = this.container.canvas.size;\n            this.quadTree = new Utils_1.QuadTree(new Utils_1.Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, (canvasSize.width * 3) / 2, (canvasSize.height * 3) / 2), 4);\n            this.update(delta);\n            for (const [, plugin] of container.plugins) {\n                container.canvas.drawPlugin(plugin, delta);\n            }\n            for (const p of this.array) {\n                p.draw(delta);\n            }\n        }\n        clear() {\n            this.array = [];\n        }\n        push(nb, mouse, overrideOptions) {\n            const container = this.container;\n            const options = container.options;\n            const limit = options.particles.number.limit * container.density;\n            this.pushing = true;\n            if (limit > 0) {\n                const countToRemove = this.count + nb - limit;\n                if (countToRemove > 0) {\n                    this.removeQuantity(countToRemove);\n                }\n            }\n            for (let i = 0; i < nb; i++) {\n                this.addParticle(mouse === null || mouse === void 0 ? void 0 : mouse.position, overrideOptions);\n            }\n            if (!options.particles.move.enable) {\n                this.container.play();\n            }\n            this.pushing = false;\n        }\n        addParticle(position, overrideOptions) {\n            try {\n                const particle = new Particle_1.Particle(this.nextId, this.container, position, overrideOptions);\n                this.array.push(particle);\n                this.nextId++;\n                return particle;\n            }\n            catch (_a) {\n                console.warn(\"error adding particle\");\n                return;\n            }\n        }\n        removeQuantity(quantity) {\n            const options = this.container.options;\n            this.removeAt(0, quantity);\n            if (!options.particles.move.enable) {\n                this.container.play();\n            }\n        }\n        getLinkFrequency(p1, p2) {\n            const key = `${Math.min(p1.id, p2.id)}_${Math.max(p1.id, p2.id)}`;\n            let res = this.linksFreq.get(key);\n            if (res === undefined) {\n                res = Math.random();\n                this.linksFreq.set(key, res);\n            }\n            return res;\n        }\n        getTriangleFrequency(p1, p2, p3) {\n            let [id1, id2, id3] = [p1.id, p2.id, p3.id];\n            if (id1 > id2) {\n                [id2, id1] = [id1, id2];\n            }\n            if (id2 > id3) {\n                [id3, id2] = [id2, id3];\n            }\n            if (id1 > id3) {\n                [id3, id1] = [id1, id3];\n            }\n            const key = `${id1}_${id2}_${id3}`;\n            let res = this.trianglesFreq.get(key);\n            if (res === undefined) {\n                res = Math.random();\n                this.trianglesFreq.set(key, res);\n            }\n            return res;\n        }\n    }\n    exports.Particles = Particles;\n});\n"]},"metadata":{},"sourceType":"script"}