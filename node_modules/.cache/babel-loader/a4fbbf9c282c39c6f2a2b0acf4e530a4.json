{"ast":null,"code":"(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define([\"require\", \"exports\", \"./AbsorberInstance\", \"../../Utils\", \"./Options/Classes/Absorber\", \"./Enums\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.Absorbers = void 0;\n\n  const AbsorberInstance_1 = require(\"./AbsorberInstance\");\n\n  const Utils_1 = require(\"../../Utils\");\n\n  const Absorber_1 = require(\"./Options/Classes/Absorber\");\n\n  const Enums_1 = require(\"./Enums\");\n\n  class Absorbers {\n    constructor(container) {\n      this.container = container;\n      this.array = [];\n      this.absorbers = [];\n      this.interactivityAbsorbers = [];\n      const overridableContainer = container;\n\n      overridableContainer.addAbsorber = (options, position) => this.addAbsorber(options, position);\n    }\n\n    init(options) {\n      var _a, _b;\n\n      if (!options) {\n        return;\n      }\n\n      if (options.absorbers) {\n        if (options.absorbers instanceof Array) {\n          this.absorbers = options.absorbers.map(s => {\n            const tmp = new Absorber_1.Absorber();\n            tmp.load(s);\n            return tmp;\n          });\n        } else {\n          if (this.absorbers instanceof Array) {\n            this.absorbers = new Absorber_1.Absorber();\n          }\n\n          this.absorbers.load(options.absorbers);\n        }\n      }\n\n      const interactivityAbsorbers = (_b = (_a = options.interactivity) === null || _a === void 0 ? void 0 : _a.modes) === null || _b === void 0 ? void 0 : _b.absorbers;\n\n      if (interactivityAbsorbers) {\n        if (interactivityAbsorbers instanceof Array) {\n          this.interactivityAbsorbers = interactivityAbsorbers.map(s => {\n            const tmp = new Absorber_1.Absorber();\n            tmp.load(s);\n            return tmp;\n          });\n        } else {\n          if (this.interactivityAbsorbers instanceof Array) {\n            this.interactivityAbsorbers = new Absorber_1.Absorber();\n          }\n\n          this.interactivityAbsorbers.load(interactivityAbsorbers);\n        }\n      }\n\n      if (this.absorbers instanceof Array) {\n        for (const absorberOptions of this.absorbers) {\n          this.addAbsorber(absorberOptions);\n        }\n      } else {\n        this.addAbsorber(this.absorbers);\n      }\n    }\n\n    particleUpdate(particle) {\n      for (const absorber of this.array) {\n        absorber.attract(particle);\n\n        if (particle.destroyed) {\n          break;\n        }\n      }\n    }\n\n    draw(context) {\n      for (const absorber of this.array) {\n        context.save();\n        absorber.draw(context);\n        context.restore();\n      }\n    }\n\n    stop() {\n      this.array = [];\n    }\n\n    resize() {\n      for (const absorber of this.array) {\n        absorber.resize();\n      }\n    }\n\n    handleClickMode(mode) {\n      const container = this.container;\n      const absorberOptions = this.absorbers;\n      const modeAbsorbers = this.interactivityAbsorbers;\n\n      if (mode === Enums_1.AbsorberClickMode.absorber) {\n        let absorbersModeOptions;\n\n        if (modeAbsorbers instanceof Array) {\n          if (modeAbsorbers.length > 0) {\n            absorbersModeOptions = Utils_1.Utils.itemFromArray(modeAbsorbers);\n          }\n        } else {\n          absorbersModeOptions = modeAbsorbers;\n        }\n\n        const absorbersOptions = absorbersModeOptions !== null && absorbersModeOptions !== void 0 ? absorbersModeOptions : absorberOptions instanceof Array ? Utils_1.Utils.itemFromArray(absorberOptions) : absorberOptions;\n        const aPosition = container.interactivity.mouse.clickPosition;\n        this.addAbsorber(absorbersOptions, aPosition);\n      }\n    }\n\n    addAbsorber(options, position) {\n      const absorber = new AbsorberInstance_1.AbsorberInstance(this, this.container, options, position);\n      this.array.push(absorber);\n      return absorber;\n    }\n\n    removeAbsorber(absorber) {\n      const index = this.array.indexOf(absorber);\n\n      if (index >= 0) {\n        this.array.splice(index, 1);\n      }\n    }\n\n  }\n\n  exports.Absorbers = Absorbers;\n});","map":{"version":3,"sources":["/Users/beetee/Downloads/Bloc/todolist/node_modules/tsparticles/dist/Plugins/Absorbers/Absorbers.js"],"names":["factory","module","exports","v","require","undefined","define","amd","Object","defineProperty","value","Absorbers","AbsorberInstance_1","Utils_1","Absorber_1","Enums_1","constructor","container","array","absorbers","interactivityAbsorbers","overridableContainer","addAbsorber","options","position","init","_a","_b","Array","map","s","tmp","Absorber","load","interactivity","modes","absorberOptions","particleUpdate","particle","absorber","attract","destroyed","draw","context","save","restore","stop","resize","handleClickMode","mode","modeAbsorbers","AbsorberClickMode","absorbersModeOptions","length","Utils","itemFromArray","absorbersOptions","aPosition","mouse","clickPosition","AbsorberInstance","push","removeAbsorber","index","indexOf","splice"],"mappings":"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","sourcesContent":["(function (factory) {\n    if (typeof module === \"object\" && typeof module.exports === \"object\") {\n        var v = factory(require, exports);\n        if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === \"function\" && define.amd) {\n        define([\"require\", \"exports\", \"./AbsorberInstance\", \"../../Utils\", \"./Options/Classes/Absorber\", \"./Enums\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.Absorbers = void 0;\n    const AbsorberInstance_1 = require(\"./AbsorberInstance\");\n    const Utils_1 = require(\"../../Utils\");\n    const Absorber_1 = require(\"./Options/Classes/Absorber\");\n    const Enums_1 = require(\"./Enums\");\n    class Absorbers {\n        constructor(container) {\n            this.container = container;\n            this.array = [];\n            this.absorbers = [];\n            this.interactivityAbsorbers = [];\n            const overridableContainer = container;\n            overridableContainer.addAbsorber = (options, position) => this.addAbsorber(options, position);\n        }\n        init(options) {\n            var _a, _b;\n            if (!options) {\n                return;\n            }\n            if (options.absorbers) {\n                if (options.absorbers instanceof Array) {\n                    this.absorbers = options.absorbers.map((s) => {\n                        const tmp = new Absorber_1.Absorber();\n                        tmp.load(s);\n                        return tmp;\n                    });\n                }\n                else {\n                    if (this.absorbers instanceof Array) {\n                        this.absorbers = new Absorber_1.Absorber();\n                    }\n                    this.absorbers.load(options.absorbers);\n                }\n            }\n            const interactivityAbsorbers = (_b = (_a = options.interactivity) === null || _a === void 0 ? void 0 : _a.modes) === null || _b === void 0 ? void 0 : _b.absorbers;\n            if (interactivityAbsorbers) {\n                if (interactivityAbsorbers instanceof Array) {\n                    this.interactivityAbsorbers = interactivityAbsorbers.map((s) => {\n                        const tmp = new Absorber_1.Absorber();\n                        tmp.load(s);\n                        return tmp;\n                    });\n                }\n                else {\n                    if (this.interactivityAbsorbers instanceof Array) {\n                        this.interactivityAbsorbers = new Absorber_1.Absorber();\n                    }\n                    this.interactivityAbsorbers.load(interactivityAbsorbers);\n                }\n            }\n            if (this.absorbers instanceof Array) {\n                for (const absorberOptions of this.absorbers) {\n                    this.addAbsorber(absorberOptions);\n                }\n            }\n            else {\n                this.addAbsorber(this.absorbers);\n            }\n        }\n        particleUpdate(particle) {\n            for (const absorber of this.array) {\n                absorber.attract(particle);\n                if (particle.destroyed) {\n                    break;\n                }\n            }\n        }\n        draw(context) {\n            for (const absorber of this.array) {\n                context.save();\n                absorber.draw(context);\n                context.restore();\n            }\n        }\n        stop() {\n            this.array = [];\n        }\n        resize() {\n            for (const absorber of this.array) {\n                absorber.resize();\n            }\n        }\n        handleClickMode(mode) {\n            const container = this.container;\n            const absorberOptions = this.absorbers;\n            const modeAbsorbers = this.interactivityAbsorbers;\n            if (mode === Enums_1.AbsorberClickMode.absorber) {\n                let absorbersModeOptions;\n                if (modeAbsorbers instanceof Array) {\n                    if (modeAbsorbers.length > 0) {\n                        absorbersModeOptions = Utils_1.Utils.itemFromArray(modeAbsorbers);\n                    }\n                }\n                else {\n                    absorbersModeOptions = modeAbsorbers;\n                }\n                const absorbersOptions = absorbersModeOptions !== null && absorbersModeOptions !== void 0 ? absorbersModeOptions : (absorberOptions instanceof Array ? Utils_1.Utils.itemFromArray(absorberOptions) : absorberOptions);\n                const aPosition = container.interactivity.mouse.clickPosition;\n                this.addAbsorber(absorbersOptions, aPosition);\n            }\n        }\n        addAbsorber(options, position) {\n            const absorber = new AbsorberInstance_1.AbsorberInstance(this, this.container, options, position);\n            this.array.push(absorber);\n            return absorber;\n        }\n        removeAbsorber(absorber) {\n            const index = this.array.indexOf(absorber);\n            if (index >= 0) {\n                this.array.splice(index, 1);\n            }\n        }\n    }\n    exports.Absorbers = Absorbers;\n});\n"]},"metadata":{},"sourceType":"script"}