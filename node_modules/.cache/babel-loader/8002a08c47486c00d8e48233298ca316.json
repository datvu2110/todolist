{"ast":null,"code":"(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define([\"require\", \"exports\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.FrameManager = void 0;\n\n  class FrameManager {\n    constructor(container) {\n      this.container = container;\n    }\n\n    nextFrame(timestamp) {\n      try {\n        const container = this.container;\n\n        if (container.lastFrameTime !== undefined && timestamp < container.lastFrameTime + 1000 / container.fpsLimit) {\n          container.draw();\n          return;\n        }\n\n        const deltaValue = timestamp - container.lastFrameTime;\n        const delta = {\n          value: deltaValue,\n          factor: 60 * deltaValue / 1000\n        };\n        container.lastFrameTime = timestamp;\n        container.particles.draw(delta);\n\n        if (container.getAnimationStatus()) {\n          container.draw();\n        }\n      } catch (e) {\n        console.error(\"tsParticles error in animation loop\", e);\n      }\n    }\n\n  }\n\n  exports.FrameManager = FrameManager;\n});","map":{"version":3,"sources":["/Users/beetee/Downloads/Bloc/todolist/node_modules/tsparticles/dist/Core/FrameManager.js"],"names":["factory","module","exports","v","require","undefined","define","amd","Object","defineProperty","value","FrameManager","constructor","container","nextFrame","timestamp","lastFrameTime","fpsLimit","draw","deltaValue","delta","factor","particles","getAnimationStatus","e","console","error"],"mappings":"AAAA,CAAC,UAAUA,OAAV,EAAmB;AAChB,MAAI,OAAOC,MAAP,KAAkB,QAAlB,IAA8B,OAAOA,MAAM,CAACC,OAAd,KAA0B,QAA5D,EAAsE;AAClE,QAAIC,CAAC,GAAGH,OAAO,CAACI,OAAD,EAAUF,OAAV,CAAf;AACA,QAAIC,CAAC,KAAKE,SAAV,EAAqBJ,MAAM,CAACC,OAAP,GAAiBC,CAAjB;AACxB,GAHD,MAIK,IAAI,OAAOG,MAAP,KAAkB,UAAlB,IAAgCA,MAAM,CAACC,GAA3C,EAAgD;AACjDD,IAAAA,MAAM,CAAC,CAAC,SAAD,EAAY,SAAZ,CAAD,EAAyBN,OAAzB,CAAN;AACH;AACJ,CARD,EAQG,UAAUI,OAAV,EAAmBF,OAAnB,EAA4B;AAC3B;;AACAM,EAAAA,MAAM,CAACC,cAAP,CAAsBP,OAAtB,EAA+B,YAA/B,EAA6C;AAAEQ,IAAAA,KAAK,EAAE;AAAT,GAA7C;AACAR,EAAAA,OAAO,CAACS,YAAR,GAAuB,KAAK,CAA5B;;AACA,QAAMA,YAAN,CAAmB;AACfC,IAAAA,WAAW,CAACC,SAAD,EAAY;AACnB,WAAKA,SAAL,GAAiBA,SAAjB;AACH;;AACDC,IAAAA,SAAS,CAACC,SAAD,EAAY;AACjB,UAAI;AACA,cAAMF,SAAS,GAAG,KAAKA,SAAvB;;AACA,YAAIA,SAAS,CAACG,aAAV,KAA4BX,SAA5B,IACAU,SAAS,GAAGF,SAAS,CAACG,aAAV,GAA0B,OAAOH,SAAS,CAACI,QAD3D,EACqE;AACjEJ,UAAAA,SAAS,CAACK,IAAV;AACA;AACH;;AACD,cAAMC,UAAU,GAAGJ,SAAS,GAAGF,SAAS,CAACG,aAAzC;AACA,cAAMI,KAAK,GAAG;AACVV,UAAAA,KAAK,EAAES,UADG;AAEVE,UAAAA,MAAM,EAAG,KAAKF,UAAN,GAAoB;AAFlB,SAAd;AAIAN,QAAAA,SAAS,CAACG,aAAV,GAA0BD,SAA1B;AACAF,QAAAA,SAAS,CAACS,SAAV,CAAoBJ,IAApB,CAAyBE,KAAzB;;AACA,YAAIP,SAAS,CAACU,kBAAV,EAAJ,EAAoC;AAChCV,UAAAA,SAAS,CAACK,IAAV;AACH;AACJ,OAjBD,CAkBA,OAAOM,CAAP,EAAU;AACNC,QAAAA,OAAO,CAACC,KAAR,CAAc,qCAAd,EAAqDF,CAArD;AACH;AACJ;;AA1Bc;;AA4BnBtB,EAAAA,OAAO,CAACS,YAAR,GAAuBA,YAAvB;AACH,CAzCD","sourcesContent":["(function (factory) {\n    if (typeof module === \"object\" && typeof module.exports === \"object\") {\n        var v = factory(require, exports);\n        if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === \"function\" && define.amd) {\n        define([\"require\", \"exports\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.FrameManager = void 0;\n    class FrameManager {\n        constructor(container) {\n            this.container = container;\n        }\n        nextFrame(timestamp) {\n            try {\n                const container = this.container;\n                if (container.lastFrameTime !== undefined &&\n                    timestamp < container.lastFrameTime + 1000 / container.fpsLimit) {\n                    container.draw();\n                    return;\n                }\n                const deltaValue = timestamp - container.lastFrameTime;\n                const delta = {\n                    value: deltaValue,\n                    factor: (60 * deltaValue) / 1000,\n                };\n                container.lastFrameTime = timestamp;\n                container.particles.draw(delta);\n                if (container.getAnimationStatus()) {\n                    container.draw();\n                }\n            }\n            catch (e) {\n                console.error(\"tsParticles error in animation loop\", e);\n            }\n        }\n    }\n    exports.FrameManager = FrameManager;\n});\n"]},"metadata":{},"sourceType":"script"}