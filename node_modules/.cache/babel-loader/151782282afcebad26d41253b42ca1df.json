{"ast":null,"code":"(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define([\"require\", \"exports\", \"../Enums/Directions\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.NumberUtils = void 0;\n\n  const Directions_1 = require(\"../Enums/Directions\");\n\n  class NumberUtils {\n    static clamp(num, min, max) {\n      return Math.min(Math.max(num, min), max);\n    }\n\n    static mix(comp1, comp2, weight1, weight2) {\n      return Math.floor((comp1 * weight1 + comp2 * weight2) / (weight1 + weight2));\n    }\n\n    static randomInRange(r1, r2) {\n      const max = Math.max(r1, r2),\n            min = Math.min(r1, r2);\n      return Math.random() * (max - min) + min;\n    }\n\n    static getValue(options) {\n      const random = options.random;\n      const {\n        enable,\n        minimumValue\n      } = typeof random === \"boolean\" ? {\n        enable: random,\n        minimumValue: 0\n      } : random;\n      return enable ? NumberUtils.randomInRange(minimumValue, options.value) : options.value;\n    }\n\n    static getDistances(pointA, pointB) {\n      const dx = pointA.x - pointB.x;\n      const dy = pointA.y - pointB.y;\n      return {\n        dx: dx,\n        dy: dy,\n        distance: Math.sqrt(dx * dx + dy * dy)\n      };\n    }\n\n    static getDistance(pointA, pointB) {\n      return NumberUtils.getDistances(pointA, pointB).distance;\n    }\n\n    static getParticleBaseVelocity(particle) {\n      let velocityBase;\n\n      switch (particle.direction) {\n        case Directions_1.MoveDirection.top:\n          velocityBase = {\n            x: 0,\n            y: -1\n          };\n          break;\n\n        case Directions_1.MoveDirection.topRight:\n          velocityBase = {\n            x: 0.5,\n            y: -0.5\n          };\n          break;\n\n        case Directions_1.MoveDirection.right:\n          velocityBase = {\n            x: 1,\n            y: -0\n          };\n          break;\n\n        case Directions_1.MoveDirection.bottomRight:\n          velocityBase = {\n            x: 0.5,\n            y: 0.5\n          };\n          break;\n\n        case Directions_1.MoveDirection.bottom:\n          velocityBase = {\n            x: 0,\n            y: 1\n          };\n          break;\n\n        case Directions_1.MoveDirection.bottomLeft:\n          velocityBase = {\n            x: -0.5,\n            y: 1\n          };\n          break;\n\n        case Directions_1.MoveDirection.left:\n          velocityBase = {\n            x: -1,\n            y: 0\n          };\n          break;\n\n        case Directions_1.MoveDirection.topLeft:\n          velocityBase = {\n            x: -0.5,\n            y: -0.5\n          };\n          break;\n\n        default:\n          velocityBase = {\n            x: 0,\n            y: 0\n          };\n          break;\n      }\n\n      return velocityBase;\n    }\n\n    static rotateVelocity(velocity, angle) {\n      return {\n        horizontal: velocity.horizontal * Math.cos(angle) - velocity.vertical * Math.sin(angle),\n        vertical: velocity.horizontal * Math.sin(angle) + velocity.vertical * Math.cos(angle)\n      };\n    }\n\n    static collisionVelocity(v1, v2, m1, m2) {\n      return {\n        horizontal: v1.horizontal * (m1 - m2) / (m1 + m2) + v2.horizontal * 2 * m2 / (m1 + m2),\n        vertical: v1.vertical\n      };\n    }\n\n  }\n\n  exports.NumberUtils = NumberUtils;\n});","map":{"version":3,"sources":["/Users/beetee/Downloads/Bloc/todolist/node_modules/tsparticles/dist/Utils/NumberUtils.js"],"names":["factory","module","exports","v","require","undefined","define","amd","Object","defineProperty","value","NumberUtils","Directions_1","clamp","num","min","max","Math","mix","comp1","comp2","weight1","weight2","floor","randomInRange","r1","r2","random","getValue","options","enable","minimumValue","getDistances","pointA","pointB","dx","x","dy","y","distance","sqrt","getDistance","getParticleBaseVelocity","particle","velocityBase","direction","MoveDirection","top","topRight","right","bottomRight","bottom","bottomLeft","left","topLeft","rotateVelocity","velocity","angle","horizontal","cos","vertical","sin","collisionVelocity","v1","v2","m1","m2"],"mappings":"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","sourcesContent":["(function (factory) {\n    if (typeof module === \"object\" && typeof module.exports === \"object\") {\n        var v = factory(require, exports);\n        if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === \"function\" && define.amd) {\n        define([\"require\", \"exports\", \"../Enums/Directions\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.NumberUtils = void 0;\n    const Directions_1 = require(\"../Enums/Directions\");\n    class NumberUtils {\n        static clamp(num, min, max) {\n            return Math.min(Math.max(num, min), max);\n        }\n        static mix(comp1, comp2, weight1, weight2) {\n            return Math.floor((comp1 * weight1 + comp2 * weight2) / (weight1 + weight2));\n        }\n        static randomInRange(r1, r2) {\n            const max = Math.max(r1, r2), min = Math.min(r1, r2);\n            return Math.random() * (max - min) + min;\n        }\n        static getValue(options) {\n            const random = options.random;\n            const { enable, minimumValue } = typeof random === \"boolean\" ? { enable: random, minimumValue: 0 } : random;\n            return enable ? NumberUtils.randomInRange(minimumValue, options.value) : options.value;\n        }\n        static getDistances(pointA, pointB) {\n            const dx = pointA.x - pointB.x;\n            const dy = pointA.y - pointB.y;\n            return { dx: dx, dy: dy, distance: Math.sqrt(dx * dx + dy * dy) };\n        }\n        static getDistance(pointA, pointB) {\n            return NumberUtils.getDistances(pointA, pointB).distance;\n        }\n        static getParticleBaseVelocity(particle) {\n            let velocityBase;\n            switch (particle.direction) {\n                case Directions_1.MoveDirection.top:\n                    velocityBase = { x: 0, y: -1 };\n                    break;\n                case Directions_1.MoveDirection.topRight:\n                    velocityBase = { x: 0.5, y: -0.5 };\n                    break;\n                case Directions_1.MoveDirection.right:\n                    velocityBase = { x: 1, y: -0 };\n                    break;\n                case Directions_1.MoveDirection.bottomRight:\n                    velocityBase = { x: 0.5, y: 0.5 };\n                    break;\n                case Directions_1.MoveDirection.bottom:\n                    velocityBase = { x: 0, y: 1 };\n                    break;\n                case Directions_1.MoveDirection.bottomLeft:\n                    velocityBase = { x: -0.5, y: 1 };\n                    break;\n                case Directions_1.MoveDirection.left:\n                    velocityBase = { x: -1, y: 0 };\n                    break;\n                case Directions_1.MoveDirection.topLeft:\n                    velocityBase = { x: -0.5, y: -0.5 };\n                    break;\n                default:\n                    velocityBase = { x: 0, y: 0 };\n                    break;\n            }\n            return velocityBase;\n        }\n        static rotateVelocity(velocity, angle) {\n            return {\n                horizontal: velocity.horizontal * Math.cos(angle) - velocity.vertical * Math.sin(angle),\n                vertical: velocity.horizontal * Math.sin(angle) + velocity.vertical * Math.cos(angle),\n            };\n        }\n        static collisionVelocity(v1, v2, m1, m2) {\n            return {\n                horizontal: (v1.horizontal * (m1 - m2)) / (m1 + m2) + (v2.horizontal * 2 * m2) / (m1 + m2),\n                vertical: v1.vertical,\n            };\n        }\n    }\n    exports.NumberUtils = NumberUtils;\n});\n"]},"metadata":{},"sourceType":"script"}