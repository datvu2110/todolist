{"ast":null,"code":"(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define([\"require\", \"exports\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.Infecter = void 0;\n\n  class Infecter {\n    constructor(container) {\n      this.container = container;\n    }\n\n    isEnabled() {\n      return this.container.options.infection.enable;\n    }\n\n    reset() {}\n\n    interact(p1, delta) {\n      var _a, _b;\n\n      const infecter1 = p1.infecter;\n      infecter1.updateInfection(delta.value);\n\n      if (infecter1.infectionStage === undefined) {\n        return;\n      }\n\n      const container = this.container;\n      const options = container.options;\n      const infectionOptions = options.infection;\n\n      if (!infectionOptions.enable || infectionOptions.stages.length < 1) {\n        return;\n      }\n\n      const infectionStage1 = infectionOptions.stages[infecter1.infectionStage];\n      const pxRatio = container.retina.pixelRatio;\n      const radius = p1.getRadius() * 2 + infectionStage1.radius * pxRatio;\n      const pos = p1.getPosition();\n      const infectedStage1 = (_a = infectionStage1.infectedStage) !== null && _a !== void 0 ? _a : infecter1.infectionStage;\n      const query = container.particles.quadTree.queryCircle(pos, radius);\n      const infections = infectionStage1.rate;\n      const neighbors = query.length;\n\n      for (const p2 of query) {\n        if (p2 === p1 || p2.destroyed || p2.spawning || !(p2.infecter.infectionStage === undefined || p2.infecter.infectionStage !== infecter1.infectionStage)) {\n          continue;\n        }\n\n        const infecter2 = p2.infecter;\n\n        if (Math.random() < infections / neighbors) {\n          if (infecter2.infectionStage === undefined) {\n            infecter2.startInfection(infectedStage1);\n          } else if (infecter2.infectionStage < infecter1.infectionStage) {\n            infecter2.updateInfectionStage(infectedStage1);\n          } else if (infecter2.infectionStage > infecter1.infectionStage) {\n            const infectionStage2 = infectionOptions.stages[infecter2.infectionStage];\n            const infectedStage2 = (_b = infectionStage2 === null || infectionStage2 === void 0 ? void 0 : infectionStage2.infectedStage) !== null && _b !== void 0 ? _b : infecter2.infectionStage;\n            infecter1.updateInfectionStage(infectedStage2);\n          }\n        }\n      }\n    }\n\n  }\n\n  exports.Infecter = Infecter;\n});","map":{"version":3,"sources":["/Users/beetee/Downloads/Bloc/todolist/node_modules/tsparticles/dist/Interactions/Particles/Infecter.js"],"names":["factory","module","exports","v","require","undefined","define","amd","Object","defineProperty","value","Infecter","constructor","container","isEnabled","options","infection","enable","reset","interact","p1","delta","_a","_b","infecter1","infecter","updateInfection","infectionStage","infectionOptions","stages","length","infectionStage1","pxRatio","retina","pixelRatio","radius","getRadius","pos","getPosition","infectedStage1","infectedStage","query","particles","quadTree","queryCircle","infections","rate","neighbors","p2","destroyed","spawning","infecter2","Math","random","startInfection","updateInfectionStage","infectionStage2","infectedStage2"],"mappings":"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","sourcesContent":["(function (factory) {\n    if (typeof module === \"object\" && typeof module.exports === \"object\") {\n        var v = factory(require, exports);\n        if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === \"function\" && define.amd) {\n        define([\"require\", \"exports\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.Infecter = void 0;\n    class Infecter {\n        constructor(container) {\n            this.container = container;\n        }\n        isEnabled() {\n            return this.container.options.infection.enable;\n        }\n        reset() {\n        }\n        interact(p1, delta) {\n            var _a, _b;\n            const infecter1 = p1.infecter;\n            infecter1.updateInfection(delta.value);\n            if (infecter1.infectionStage === undefined) {\n                return;\n            }\n            const container = this.container;\n            const options = container.options;\n            const infectionOptions = options.infection;\n            if (!infectionOptions.enable || infectionOptions.stages.length < 1) {\n                return;\n            }\n            const infectionStage1 = infectionOptions.stages[infecter1.infectionStage];\n            const pxRatio = container.retina.pixelRatio;\n            const radius = p1.getRadius() * 2 + infectionStage1.radius * pxRatio;\n            const pos = p1.getPosition();\n            const infectedStage1 = (_a = infectionStage1.infectedStage) !== null && _a !== void 0 ? _a : infecter1.infectionStage;\n            const query = container.particles.quadTree.queryCircle(pos, radius);\n            const infections = infectionStage1.rate;\n            const neighbors = query.length;\n            for (const p2 of query) {\n                if (p2 === p1 ||\n                    p2.destroyed ||\n                    p2.spawning ||\n                    !(p2.infecter.infectionStage === undefined || p2.infecter.infectionStage !== infecter1.infectionStage)) {\n                    continue;\n                }\n                const infecter2 = p2.infecter;\n                if (Math.random() < infections / neighbors) {\n                    if (infecter2.infectionStage === undefined) {\n                        infecter2.startInfection(infectedStage1);\n                    }\n                    else if (infecter2.infectionStage < infecter1.infectionStage) {\n                        infecter2.updateInfectionStage(infectedStage1);\n                    }\n                    else if (infecter2.infectionStage > infecter1.infectionStage) {\n                        const infectionStage2 = infectionOptions.stages[infecter2.infectionStage];\n                        const infectedStage2 = (_b = infectionStage2 === null || infectionStage2 === void 0 ? void 0 : infectionStage2.infectedStage) !== null && _b !== void 0 ? _b : infecter2.infectionStage;\n                        infecter1.updateInfectionStage(infectedStage2);\n                    }\n                }\n            }\n        }\n    }\n    exports.Infecter = Infecter;\n});\n"]},"metadata":{},"sourceType":"script"}