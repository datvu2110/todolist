{"ast":null,"code":"(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define([\"require\", \"exports\", \"../../Enums\", \"../../Utils\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.Collider = void 0;\n\n  const Enums_1 = require(\"../../Enums\");\n\n  const Utils_1 = require(\"../../Utils\");\n\n  function bounce(p1, p2) {\n    Utils_1.Utils.circleBounce(Utils_1.Utils.circleBounceDataFromParticle(p1), Utils_1.Utils.circleBounceDataFromParticle(p2));\n  }\n\n  function destroy(p1, p2) {\n    if (p1.getRadius() === undefined && p2.getRadius() !== undefined) {\n      p1.destroy();\n    } else if (p1.getRadius() !== undefined && p2.getRadius() === undefined) {\n      p2.destroy();\n    } else if (p1.getRadius() !== undefined && p2.getRadius() !== undefined) {\n      if (p1.getRadius() >= p2.getRadius()) {\n        p2.destroy();\n      } else {\n        p1.destroy();\n      }\n    }\n  }\n\n  class Collider {\n    constructor(container) {\n      this.container = container;\n    }\n\n    isEnabled(particle) {\n      return particle.particlesOptions.collisions.enable;\n    }\n\n    reset() {}\n\n    interact(p1) {\n      const container = this.container;\n      const pos1 = p1.getPosition();\n      const query = container.particles.quadTree.queryCircle(pos1, p1.getRadius() * 2);\n\n      for (const p2 of query) {\n        if (p1 === p2 || !p2.particlesOptions.collisions.enable || p1.particlesOptions.collisions.mode !== p2.particlesOptions.collisions.mode || p2.destroyed || p2.spawning) {\n          continue;\n        }\n\n        const pos2 = p2.getPosition();\n        const dist = Utils_1.NumberUtils.getDistance(pos1, pos2);\n        const radius1 = p1.getRadius();\n        const radius2 = p2.getRadius();\n        const distP = radius1 + radius2;\n\n        if (dist <= distP) {\n          this.resolveCollision(p1, p2);\n        }\n      }\n    }\n\n    resolveCollision(p1, p2) {\n      switch (p1.particlesOptions.collisions.mode) {\n        case Enums_1.CollisionMode.absorb:\n          {\n            this.absorb(p1, p2);\n            break;\n          }\n\n        case Enums_1.CollisionMode.bounce:\n          {\n            bounce(p1, p2);\n            break;\n          }\n\n        case Enums_1.CollisionMode.destroy:\n          {\n            destroy(p1, p2);\n            break;\n          }\n      }\n    }\n\n    absorb(p1, p2) {\n      const container = this.container;\n      const fps = container.options.fpsLimit / 1000;\n\n      if (p1.getRadius() === undefined && p2.getRadius() !== undefined) {\n        p1.destroy();\n      } else if (p1.getRadius() !== undefined && p2.getRadius() === undefined) {\n        p2.destroy();\n      } else if (p1.getRadius() !== undefined && p2.getRadius() !== undefined) {\n        if (p1.getRadius() >= p2.getRadius()) {\n          const factor = Utils_1.NumberUtils.clamp(p1.getRadius() / p2.getRadius(), 0, p2.getRadius()) * fps;\n          p1.size.value += factor;\n          p2.size.value -= factor;\n\n          if (p2.getRadius() <= container.retina.pixelRatio) {\n            p2.size.value = 0;\n            p2.destroy();\n          }\n        } else {\n          const factor = Utils_1.NumberUtils.clamp(p2.getRadius() / p1.getRadius(), 0, p1.getRadius()) * fps;\n          p1.size.value -= factor;\n          p2.size.value += factor;\n\n          if (p1.getRadius() <= container.retina.pixelRatio) {\n            p1.size.value = 0;\n            p1.destroy();\n          }\n        }\n      }\n    }\n\n  }\n\n  exports.Collider = Collider;\n});","map":{"version":3,"sources":["/Users/beetee/Downloads/Bloc/todolist/node_modules/tsparticles/dist/Interactions/Particles/Collider.js"],"names":["factory","module","exports","v","require","undefined","define","amd","Object","defineProperty","value","Collider","Enums_1","Utils_1","bounce","p1","p2","Utils","circleBounce","circleBounceDataFromParticle","destroy","getRadius","constructor","container","isEnabled","particle","particlesOptions","collisions","enable","reset","interact","pos1","getPosition","query","particles","quadTree","queryCircle","mode","destroyed","spawning","pos2","dist","NumberUtils","getDistance","radius1","radius2","distP","resolveCollision","CollisionMode","absorb","fps","options","fpsLimit","factor","clamp","size","retina","pixelRatio"],"mappings":"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","sourcesContent":["(function (factory) {\n    if (typeof module === \"object\" && typeof module.exports === \"object\") {\n        var v = factory(require, exports);\n        if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === \"function\" && define.amd) {\n        define([\"require\", \"exports\", \"../../Enums\", \"../../Utils\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.Collider = void 0;\n    const Enums_1 = require(\"../../Enums\");\n    const Utils_1 = require(\"../../Utils\");\n    function bounce(p1, p2) {\n        Utils_1.Utils.circleBounce(Utils_1.Utils.circleBounceDataFromParticle(p1), Utils_1.Utils.circleBounceDataFromParticle(p2));\n    }\n    function destroy(p1, p2) {\n        if (p1.getRadius() === undefined && p2.getRadius() !== undefined) {\n            p1.destroy();\n        }\n        else if (p1.getRadius() !== undefined && p2.getRadius() === undefined) {\n            p2.destroy();\n        }\n        else if (p1.getRadius() !== undefined && p2.getRadius() !== undefined) {\n            if (p1.getRadius() >= p2.getRadius()) {\n                p2.destroy();\n            }\n            else {\n                p1.destroy();\n            }\n        }\n    }\n    class Collider {\n        constructor(container) {\n            this.container = container;\n        }\n        isEnabled(particle) {\n            return particle.particlesOptions.collisions.enable;\n        }\n        reset() {\n        }\n        interact(p1) {\n            const container = this.container;\n            const pos1 = p1.getPosition();\n            const query = container.particles.quadTree.queryCircle(pos1, p1.getRadius() * 2);\n            for (const p2 of query) {\n                if (p1 === p2 ||\n                    !p2.particlesOptions.collisions.enable ||\n                    p1.particlesOptions.collisions.mode !== p2.particlesOptions.collisions.mode ||\n                    p2.destroyed ||\n                    p2.spawning) {\n                    continue;\n                }\n                const pos2 = p2.getPosition();\n                const dist = Utils_1.NumberUtils.getDistance(pos1, pos2);\n                const radius1 = p1.getRadius();\n                const radius2 = p2.getRadius();\n                const distP = radius1 + radius2;\n                if (dist <= distP) {\n                    this.resolveCollision(p1, p2);\n                }\n            }\n        }\n        resolveCollision(p1, p2) {\n            switch (p1.particlesOptions.collisions.mode) {\n                case Enums_1.CollisionMode.absorb: {\n                    this.absorb(p1, p2);\n                    break;\n                }\n                case Enums_1.CollisionMode.bounce: {\n                    bounce(p1, p2);\n                    break;\n                }\n                case Enums_1.CollisionMode.destroy: {\n                    destroy(p1, p2);\n                    break;\n                }\n            }\n        }\n        absorb(p1, p2) {\n            const container = this.container;\n            const fps = container.options.fpsLimit / 1000;\n            if (p1.getRadius() === undefined && p2.getRadius() !== undefined) {\n                p1.destroy();\n            }\n            else if (p1.getRadius() !== undefined && p2.getRadius() === undefined) {\n                p2.destroy();\n            }\n            else if (p1.getRadius() !== undefined && p2.getRadius() !== undefined) {\n                if (p1.getRadius() >= p2.getRadius()) {\n                    const factor = Utils_1.NumberUtils.clamp(p1.getRadius() / p2.getRadius(), 0, p2.getRadius()) * fps;\n                    p1.size.value += factor;\n                    p2.size.value -= factor;\n                    if (p2.getRadius() <= container.retina.pixelRatio) {\n                        p2.size.value = 0;\n                        p2.destroy();\n                    }\n                }\n                else {\n                    const factor = Utils_1.NumberUtils.clamp(p2.getRadius() / p1.getRadius(), 0, p1.getRadius()) * fps;\n                    p1.size.value -= factor;\n                    p2.size.value += factor;\n                    if (p1.getRadius() <= container.retina.pixelRatio) {\n                        p1.size.value = 0;\n                        p1.destroy();\n                    }\n                }\n            }\n        }\n    }\n    exports.Collider = Collider;\n});\n"]},"metadata":{},"sourceType":"script"}