{"ast":null,"code":"(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define([\"require\", \"exports\", \"../../Utils\", \"../../Enums/Modes\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.Connector = void 0;\n\n  const Utils_1 = require(\"../../Utils\");\n\n  const Modes_1 = require(\"../../Enums/Modes\");\n\n  class Connector {\n    constructor(container) {\n      this.container = container;\n    }\n\n    isEnabled() {\n      const container = this.container;\n      const mouse = container.interactivity.mouse;\n      const events = container.options.interactivity.events;\n\n      if (!(events.onHover.enable && mouse.position)) {\n        return false;\n      }\n\n      const hoverMode = events.onHover.mode;\n      return Utils_1.Utils.isInArray(Modes_1.HoverMode.connect, hoverMode);\n    }\n\n    reset() {}\n\n    interact() {\n      const container = this.container;\n      const options = container.options;\n\n      if (options.interactivity.events.onHover.enable && container.interactivity.status === \"mousemove\") {\n        const mousePos = container.interactivity.mouse.position;\n\n        if (!mousePos) {\n          return;\n        }\n\n        const distance = Math.abs(container.retina.connectModeRadius);\n        const query = container.particles.quadTree.queryCircle(mousePos, distance);\n        let i = 0;\n\n        for (const p1 of query) {\n          const pos1 = p1.getPosition();\n\n          for (const p2 of query.slice(i + 1)) {\n            const pos2 = p2.getPosition();\n            const distMax = Math.abs(container.retina.connectModeDistance);\n            const xDiff = Math.abs(pos1.x - pos2.x);\n            const yDiff = Math.abs(pos1.y - pos2.y);\n\n            if (xDiff < distMax && yDiff < distMax) {\n              container.canvas.drawConnectLine(p1, p2);\n            }\n          }\n\n          ++i;\n        }\n      }\n    }\n\n  }\n\n  exports.Connector = Connector;\n});","map":{"version":3,"sources":["/Users/beetee/Downloads/Bloc/todolist/node_modules/tsparticles/dist/Interactions/External/Connector.js"],"names":["factory","module","exports","v","require","undefined","define","amd","Object","defineProperty","value","Connector","Utils_1","Modes_1","constructor","container","isEnabled","mouse","interactivity","events","options","onHover","enable","position","hoverMode","mode","Utils","isInArray","HoverMode","connect","reset","interact","status","mousePos","distance","Math","abs","retina","connectModeRadius","query","particles","quadTree","queryCircle","i","p1","pos1","getPosition","p2","slice","pos2","distMax","connectModeDistance","xDiff","x","yDiff","y","canvas","drawConnectLine"],"mappings":"AAAA,CAAC,UAAUA,OAAV,EAAmB;AAChB,MAAI,OAAOC,MAAP,KAAkB,QAAlB,IAA8B,OAAOA,MAAM,CAACC,OAAd,KAA0B,QAA5D,EAAsE;AAClE,QAAIC,CAAC,GAAGH,OAAO,CAACI,OAAD,EAAUF,OAAV,CAAf;AACA,QAAIC,CAAC,KAAKE,SAAV,EAAqBJ,MAAM,CAACC,OAAP,GAAiBC,CAAjB;AACxB,GAHD,MAIK,IAAI,OAAOG,MAAP,KAAkB,UAAlB,IAAgCA,MAAM,CAACC,GAA3C,EAAgD;AACjDD,IAAAA,MAAM,CAAC,CAAC,SAAD,EAAY,SAAZ,EAAuB,aAAvB,EAAsC,mBAAtC,CAAD,EAA6DN,OAA7D,CAAN;AACH;AACJ,CARD,EAQG,UAAUI,OAAV,EAAmBF,OAAnB,EAA4B;AAC3B;;AACAM,EAAAA,MAAM,CAACC,cAAP,CAAsBP,OAAtB,EAA+B,YAA/B,EAA6C;AAAEQ,IAAAA,KAAK,EAAE;AAAT,GAA7C;AACAR,EAAAA,OAAO,CAACS,SAAR,GAAoB,KAAK,CAAzB;;AACA,QAAMC,OAAO,GAAGR,OAAO,CAAC,aAAD,CAAvB;;AACA,QAAMS,OAAO,GAAGT,OAAO,CAAC,mBAAD,CAAvB;;AACA,QAAMO,SAAN,CAAgB;AACZG,IAAAA,WAAW,CAACC,SAAD,EAAY;AACnB,WAAKA,SAAL,GAAiBA,SAAjB;AACH;;AACDC,IAAAA,SAAS,GAAG;AACR,YAAMD,SAAS,GAAG,KAAKA,SAAvB;AACA,YAAME,KAAK,GAAGF,SAAS,CAACG,aAAV,CAAwBD,KAAtC;AACA,YAAME,MAAM,GAAGJ,SAAS,CAACK,OAAV,CAAkBF,aAAlB,CAAgCC,MAA/C;;AACA,UAAI,EAAEA,MAAM,CAACE,OAAP,CAAeC,MAAf,IAAyBL,KAAK,CAACM,QAAjC,CAAJ,EAAgD;AAC5C,eAAO,KAAP;AACH;;AACD,YAAMC,SAAS,GAAGL,MAAM,CAACE,OAAP,CAAeI,IAAjC;AACA,aAAOb,OAAO,CAACc,KAAR,CAAcC,SAAd,CAAwBd,OAAO,CAACe,SAAR,CAAkBC,OAA1C,EAAmDL,SAAnD,CAAP;AACH;;AACDM,IAAAA,KAAK,GAAG,CACP;;AACDC,IAAAA,QAAQ,GAAG;AACP,YAAMhB,SAAS,GAAG,KAAKA,SAAvB;AACA,YAAMK,OAAO,GAAGL,SAAS,CAACK,OAA1B;;AACA,UAAIA,OAAO,CAACF,aAAR,CAAsBC,MAAtB,CAA6BE,OAA7B,CAAqCC,MAArC,IAA+CP,SAAS,CAACG,aAAV,CAAwBc,MAAxB,KAAmC,WAAtF,EAAmG;AAC/F,cAAMC,QAAQ,GAAGlB,SAAS,CAACG,aAAV,CAAwBD,KAAxB,CAA8BM,QAA/C;;AACA,YAAI,CAACU,QAAL,EAAe;AACX;AACH;;AACD,cAAMC,QAAQ,GAAGC,IAAI,CAACC,GAAL,CAASrB,SAAS,CAACsB,MAAV,CAAiBC,iBAA1B,CAAjB;AACA,cAAMC,KAAK,GAAGxB,SAAS,CAACyB,SAAV,CAAoBC,QAApB,CAA6BC,WAA7B,CAAyCT,QAAzC,EAAmDC,QAAnD,CAAd;AACA,YAAIS,CAAC,GAAG,CAAR;;AACA,aAAK,MAAMC,EAAX,IAAiBL,KAAjB,EAAwB;AACpB,gBAAMM,IAAI,GAAGD,EAAE,CAACE,WAAH,EAAb;;AACA,eAAK,MAAMC,EAAX,IAAiBR,KAAK,CAACS,KAAN,CAAYL,CAAC,GAAG,CAAhB,CAAjB,EAAqC;AACjC,kBAAMM,IAAI,GAAGF,EAAE,CAACD,WAAH,EAAb;AACA,kBAAMI,OAAO,GAAGf,IAAI,CAACC,GAAL,CAASrB,SAAS,CAACsB,MAAV,CAAiBc,mBAA1B,CAAhB;AACA,kBAAMC,KAAK,GAAGjB,IAAI,CAACC,GAAL,CAASS,IAAI,CAACQ,CAAL,GAASJ,IAAI,CAACI,CAAvB,CAAd;AACA,kBAAMC,KAAK,GAAGnB,IAAI,CAACC,GAAL,CAASS,IAAI,CAACU,CAAL,GAASN,IAAI,CAACM,CAAvB,CAAd;;AACA,gBAAIH,KAAK,GAAGF,OAAR,IAAmBI,KAAK,GAAGJ,OAA/B,EAAwC;AACpCnC,cAAAA,SAAS,CAACyC,MAAV,CAAiBC,eAAjB,CAAiCb,EAAjC,EAAqCG,EAArC;AACH;AACJ;;AACD,YAAEJ,CAAF;AACH;AACJ;AACJ;;AAzCW;;AA2ChBzC,EAAAA,OAAO,CAACS,SAAR,GAAoBA,SAApB;AACH,CA1DD","sourcesContent":["(function (factory) {\n    if (typeof module === \"object\" && typeof module.exports === \"object\") {\n        var v = factory(require, exports);\n        if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === \"function\" && define.amd) {\n        define([\"require\", \"exports\", \"../../Utils\", \"../../Enums/Modes\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.Connector = void 0;\n    const Utils_1 = require(\"../../Utils\");\n    const Modes_1 = require(\"../../Enums/Modes\");\n    class Connector {\n        constructor(container) {\n            this.container = container;\n        }\n        isEnabled() {\n            const container = this.container;\n            const mouse = container.interactivity.mouse;\n            const events = container.options.interactivity.events;\n            if (!(events.onHover.enable && mouse.position)) {\n                return false;\n            }\n            const hoverMode = events.onHover.mode;\n            return Utils_1.Utils.isInArray(Modes_1.HoverMode.connect, hoverMode);\n        }\n        reset() {\n        }\n        interact() {\n            const container = this.container;\n            const options = container.options;\n            if (options.interactivity.events.onHover.enable && container.interactivity.status === \"mousemove\") {\n                const mousePos = container.interactivity.mouse.position;\n                if (!mousePos) {\n                    return;\n                }\n                const distance = Math.abs(container.retina.connectModeRadius);\n                const query = container.particles.quadTree.queryCircle(mousePos, distance);\n                let i = 0;\n                for (const p1 of query) {\n                    const pos1 = p1.getPosition();\n                    for (const p2 of query.slice(i + 1)) {\n                        const pos2 = p2.getPosition();\n                        const distMax = Math.abs(container.retina.connectModeDistance);\n                        const xDiff = Math.abs(pos1.x - pos2.x);\n                        const yDiff = Math.abs(pos1.y - pos2.y);\n                        if (xDiff < distMax && yDiff < distMax) {\n                            container.canvas.drawConnectLine(p1, p2);\n                        }\n                    }\n                    ++i;\n                }\n            }\n        }\n    }\n    exports.Connector = Connector;\n});\n"]},"metadata":{},"sourceType":"script"}