{"ast":null,"code":"(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define([\"require\", \"exports\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.Plugins = void 0;\n  const plugins = [];\n  const presets = new Map();\n  const drawers = new Map();\n\n  class Plugins {\n    static getPlugin(plugin) {\n      return plugins.find(t => t.id === plugin);\n    }\n\n    static addPlugin(plugin) {\n      if (!Plugins.getPlugin(plugin.id)) {\n        plugins.push(plugin);\n      }\n    }\n\n    static getAvailablePlugins(container) {\n      const res = new Map();\n\n      for (const plugin of plugins) {\n        if (!plugin.needsPlugin(container.options)) {\n          continue;\n        }\n\n        res.set(plugin.id, plugin.getPlugin(container));\n      }\n\n      return res;\n    }\n\n    static loadOptions(options, sourceOptions) {\n      for (const plugin of plugins) {\n        plugin.loadOptions(options, sourceOptions);\n      }\n    }\n\n    static getPreset(preset) {\n      return presets.get(preset);\n    }\n\n    static addPreset(presetKey, options) {\n      if (!Plugins.getPreset(presetKey)) {\n        presets.set(presetKey, options);\n      }\n    }\n\n    static addShapeDrawer(type, drawer) {\n      if (!Plugins.getShapeDrawer(type)) {\n        drawers.set(type, drawer);\n      }\n    }\n\n    static getShapeDrawer(type) {\n      return drawers.get(type);\n    }\n\n    static getSupportedShapes() {\n      return drawers.keys();\n    }\n\n  }\n\n  exports.Plugins = Plugins;\n});","map":{"version":3,"sources":["/Users/beetee/Downloads/Bloc/todolist/node_modules/tsparticles/dist/Utils/Plugins.js"],"names":["factory","module","exports","v","require","undefined","define","amd","Object","defineProperty","value","Plugins","plugins","presets","Map","drawers","getPlugin","plugin","find","t","id","addPlugin","push","getAvailablePlugins","container","res","needsPlugin","options","set","loadOptions","sourceOptions","getPreset","preset","get","addPreset","presetKey","addShapeDrawer","type","drawer","getShapeDrawer","getSupportedShapes","keys"],"mappings":"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","sourcesContent":["(function (factory) {\n    if (typeof module === \"object\" && typeof module.exports === \"object\") {\n        var v = factory(require, exports);\n        if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === \"function\" && define.amd) {\n        define([\"require\", \"exports\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.Plugins = void 0;\n    const plugins = [];\n    const presets = new Map();\n    const drawers = new Map();\n    class Plugins {\n        static getPlugin(plugin) {\n            return plugins.find((t) => t.id === plugin);\n        }\n        static addPlugin(plugin) {\n            if (!Plugins.getPlugin(plugin.id)) {\n                plugins.push(plugin);\n            }\n        }\n        static getAvailablePlugins(container) {\n            const res = new Map();\n            for (const plugin of plugins) {\n                if (!plugin.needsPlugin(container.options)) {\n                    continue;\n                }\n                res.set(plugin.id, plugin.getPlugin(container));\n            }\n            return res;\n        }\n        static loadOptions(options, sourceOptions) {\n            for (const plugin of plugins) {\n                plugin.loadOptions(options, sourceOptions);\n            }\n        }\n        static getPreset(preset) {\n            return presets.get(preset);\n        }\n        static addPreset(presetKey, options) {\n            if (!Plugins.getPreset(presetKey)) {\n                presets.set(presetKey, options);\n            }\n        }\n        static addShapeDrawer(type, drawer) {\n            if (!Plugins.getShapeDrawer(type)) {\n                drawers.set(type, drawer);\n            }\n        }\n        static getShapeDrawer(type) {\n            return drawers.get(type);\n        }\n        static getSupportedShapes() {\n            return drawers.keys();\n        }\n    }\n    exports.Plugins = Plugins;\n});\n"]},"metadata":{},"sourceType":"script"}