{"ast":null,"code":"(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define([\"require\", \"exports\", \"./Range\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.Circle = void 0;\n\n  const Range_1 = require(\"./Range\");\n\n  class Circle extends Range_1.Range {\n    constructor(x, y, radius) {\n      super(x, y);\n      this.radius = radius;\n    }\n\n    contains(point) {\n      const d = Math.pow(point.x - this.position.x, 2) + Math.pow(point.y - this.position.y, 2);\n      return d <= this.radius * this.radius;\n    }\n\n    intersects(range) {\n      const rect = range;\n      const circle = range;\n      const pos1 = this.position;\n      const pos2 = range.position;\n      const xDist = Math.abs(pos2.x - pos1.x);\n      const yDist = Math.abs(pos2.y - pos1.y);\n      const r = this.radius;\n\n      if (circle.radius !== undefined) {\n        const rSum = r + circle.radius;\n        const dist = Math.sqrt(xDist * xDist + yDist + yDist);\n        return rSum > dist;\n      } else if (rect.size !== undefined) {\n        const w = rect.size.width;\n        const h = rect.size.height;\n        const edges = Math.pow(xDist - w, 2) + Math.pow(yDist - h, 2);\n\n        if (xDist > r + w || yDist > r + h) {\n          return false;\n        }\n\n        if (xDist <= w || yDist <= h) {\n          return true;\n        }\n\n        return edges <= r * r;\n      }\n\n      return false;\n    }\n\n  }\n\n  exports.Circle = Circle;\n});","map":{"version":3,"sources":["/Users/beetee/Downloads/Bloc/todolist/node_modules/tsparticles/dist/Utils/Circle.js"],"names":["factory","module","exports","v","require","undefined","define","amd","Object","defineProperty","value","Circle","Range_1","Range","constructor","x","y","radius","contains","point","d","Math","pow","position","intersects","range","rect","circle","pos1","pos2","xDist","abs","yDist","r","rSum","dist","sqrt","size","w","width","h","height","edges"],"mappings":"AAAA,CAAC,UAAUA,OAAV,EAAmB;AAChB,MAAI,OAAOC,MAAP,KAAkB,QAAlB,IAA8B,OAAOA,MAAM,CAACC,OAAd,KAA0B,QAA5D,EAAsE;AAClE,QAAIC,CAAC,GAAGH,OAAO,CAACI,OAAD,EAAUF,OAAV,CAAf;AACA,QAAIC,CAAC,KAAKE,SAAV,EAAqBJ,MAAM,CAACC,OAAP,GAAiBC,CAAjB;AACxB,GAHD,MAIK,IAAI,OAAOG,MAAP,KAAkB,UAAlB,IAAgCA,MAAM,CAACC,GAA3C,EAAgD;AACjDD,IAAAA,MAAM,CAAC,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,CAAD,EAAoCN,OAApC,CAAN;AACH;AACJ,CARD,EAQG,UAAUI,OAAV,EAAmBF,OAAnB,EAA4B;AAC3B;;AACAM,EAAAA,MAAM,CAACC,cAAP,CAAsBP,OAAtB,EAA+B,YAA/B,EAA6C;AAAEQ,IAAAA,KAAK,EAAE;AAAT,GAA7C;AACAR,EAAAA,OAAO,CAACS,MAAR,GAAiB,KAAK,CAAtB;;AACA,QAAMC,OAAO,GAAGR,OAAO,CAAC,SAAD,CAAvB;;AACA,QAAMO,MAAN,SAAqBC,OAAO,CAACC,KAA7B,CAAmC;AAC/BC,IAAAA,WAAW,CAACC,CAAD,EAAIC,CAAJ,EAAOC,MAAP,EAAe;AACtB,YAAMF,CAAN,EAASC,CAAT;AACA,WAAKC,MAAL,GAAcA,MAAd;AACH;;AACDC,IAAAA,QAAQ,CAACC,KAAD,EAAQ;AACZ,YAAMC,CAAC,GAAGC,IAAI,CAACC,GAAL,CAASH,KAAK,CAACJ,CAAN,GAAU,KAAKQ,QAAL,CAAcR,CAAjC,EAAoC,CAApC,IAAyCM,IAAI,CAACC,GAAL,CAASH,KAAK,CAACH,CAAN,GAAU,KAAKO,QAAL,CAAcP,CAAjC,EAAoC,CAApC,CAAnD;AACA,aAAOI,CAAC,IAAI,KAAKH,MAAL,GAAc,KAAKA,MAA/B;AACH;;AACDO,IAAAA,UAAU,CAACC,KAAD,EAAQ;AACd,YAAMC,IAAI,GAAGD,KAAb;AACA,YAAME,MAAM,GAAGF,KAAf;AACA,YAAMG,IAAI,GAAG,KAAKL,QAAlB;AACA,YAAMM,IAAI,GAAGJ,KAAK,CAACF,QAAnB;AACA,YAAMO,KAAK,GAAGT,IAAI,CAACU,GAAL,CAASF,IAAI,CAACd,CAAL,GAASa,IAAI,CAACb,CAAvB,CAAd;AACA,YAAMiB,KAAK,GAAGX,IAAI,CAACU,GAAL,CAASF,IAAI,CAACb,CAAL,GAASY,IAAI,CAACZ,CAAvB,CAAd;AACA,YAAMiB,CAAC,GAAG,KAAKhB,MAAf;;AACA,UAAIU,MAAM,CAACV,MAAP,KAAkBZ,SAAtB,EAAiC;AAC7B,cAAM6B,IAAI,GAAGD,CAAC,GAAGN,MAAM,CAACV,MAAxB;AACA,cAAMkB,IAAI,GAAGd,IAAI,CAACe,IAAL,CAAUN,KAAK,GAAGA,KAAR,GAAgBE,KAAhB,GAAwBA,KAAlC,CAAb;AACA,eAAOE,IAAI,GAAGC,IAAd;AACH,OAJD,MAKK,IAAIT,IAAI,CAACW,IAAL,KAAchC,SAAlB,EAA6B;AAC9B,cAAMiC,CAAC,GAAGZ,IAAI,CAACW,IAAL,CAAUE,KAApB;AACA,cAAMC,CAAC,GAAGd,IAAI,CAACW,IAAL,CAAUI,MAApB;AACA,cAAMC,KAAK,GAAGrB,IAAI,CAACC,GAAL,CAASQ,KAAK,GAAGQ,CAAjB,EAAoB,CAApB,IAAyBjB,IAAI,CAACC,GAAL,CAASU,KAAK,GAAGQ,CAAjB,EAAoB,CAApB,CAAvC;;AACA,YAAIV,KAAK,GAAGG,CAAC,GAAGK,CAAZ,IAAiBN,KAAK,GAAGC,CAAC,GAAGO,CAAjC,EAAoC;AAChC,iBAAO,KAAP;AACH;;AACD,YAAIV,KAAK,IAAIQ,CAAT,IAAcN,KAAK,IAAIQ,CAA3B,EAA8B;AAC1B,iBAAO,IAAP;AACH;;AACD,eAAOE,KAAK,IAAIT,CAAC,GAAGA,CAApB;AACH;;AACD,aAAO,KAAP;AACH;;AAnC8B;;AAqCnC/B,EAAAA,OAAO,CAACS,MAAR,GAAiBA,MAAjB;AACH,CAnDD","sourcesContent":["(function (factory) {\n    if (typeof module === \"object\" && typeof module.exports === \"object\") {\n        var v = factory(require, exports);\n        if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === \"function\" && define.amd) {\n        define([\"require\", \"exports\", \"./Range\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.Circle = void 0;\n    const Range_1 = require(\"./Range\");\n    class Circle extends Range_1.Range {\n        constructor(x, y, radius) {\n            super(x, y);\n            this.radius = radius;\n        }\n        contains(point) {\n            const d = Math.pow(point.x - this.position.x, 2) + Math.pow(point.y - this.position.y, 2);\n            return d <= this.radius * this.radius;\n        }\n        intersects(range) {\n            const rect = range;\n            const circle = range;\n            const pos1 = this.position;\n            const pos2 = range.position;\n            const xDist = Math.abs(pos2.x - pos1.x);\n            const yDist = Math.abs(pos2.y - pos1.y);\n            const r = this.radius;\n            if (circle.radius !== undefined) {\n                const rSum = r + circle.radius;\n                const dist = Math.sqrt(xDist * xDist + yDist + yDist);\n                return rSum > dist;\n            }\n            else if (rect.size !== undefined) {\n                const w = rect.size.width;\n                const h = rect.size.height;\n                const edges = Math.pow(xDist - w, 2) + Math.pow(yDist - h, 2);\n                if (xDist > r + w || yDist > r + h) {\n                    return false;\n                }\n                if (xDist <= w || yDist <= h) {\n                    return true;\n                }\n                return edges <= r * r;\n            }\n            return false;\n        }\n    }\n    exports.Circle = Circle;\n});\n"]},"metadata":{},"sourceType":"script"}